template st:profile {}
where {}

function us:start() {
    set(?map = xt:map())
}

function us:kind(?s) {
    coalesce (st:getgroup(?s), 
        if (isURI(?s), "uri", 
        if (isBlank(?s), "bnode", "literal")))
}

function us:record(?s) {
   xt:set(?map, ?s, coalesce(xt:get(?map, ?s), concat('n', xt:size(?map))))
}

function us:get(?s) {
    xt:get(?map, ?s)
}

function us:getNodes() {
    return (?map)
}

function us:declare(?fun) {
    set(?pretty = ?fun)
}

function us:label(?s) {
    if (bound(?pretty), us:pretty(funcall(?pretty, ?s)), us:pretty(?s))
}

function us:pretty(?s) {
    if (isBlank(?s), "",
    if (isLiteral(?s), us:literal(?s), us:uri(?s)))
}

function us:uri(?u) {
    if (contains(?u, ".jpg"), us:shorten(st:turtle(?u, true)), st:turtle(?u, true))
}

function us:shorten(?l) {
    let (?s = if (strlen(?l) > 50, concat(substr(?l, 1, 50), "..."), ?l)) { ?s }
}

function us:literal(?l) {
    let (?s = us:shorten(?l)) {
        replace(replace(str(?s), "\n", ""), "\"", "'")
    }
}

function us:nodeClass(?s) {
    coalesce(st:getclass(?s), 
        if (isLiteral(?s), "literal", if (isURI(?s), "uri", "bnode") ) )
} 

function us:prefix(?p) {
    if (strstarts(?p, rdf:),  "rdf", 
    if (strstarts(?p, rdfs:), "rdfs", 
    if (strstarts(?p, owl:),  "owl", 
    if (strstarts(?p, foaf:), "foaf", 
    if (strstarts(?p, skos:), "skos", 
    if (strstarts(?p, dc:),   "dc", 
    "default") ) ))))
}

function us:edgeClass(?g, ?p) {
    coalesce(st:getclass(?g), us:prefix(?p))
}

function us:edgeGroup(?g, ?p) {
    coalesce(st:getgroup(?g), us:prefix(?p))
}

function us:plist(?list) {
    reduce(lambda(?a, ?b) {concat(?a, ", " , ?b) }, 
        maplist(lambda(?name) { st:format("\"%s\"", us:pname(?name)) }, ?list)
    )
}

function us:pname(?x) {
    if (isURI(?x), st:turtle(?x), ?x)
}
  
