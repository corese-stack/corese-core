template st:profile {
}
where {
}

# generate a list of json description of IP address
function us:jsonlist() {
    let (?map = ds:getPublicDatatypeValue(true),
         #?host = xt:get(?map, st:host),
         ?host = us:map(),
         ?iplist   = us:iplist(?host),
         ?jsonlist = maplist(us:describe, ?iplist)) {
        return(?jsonlist)
    }
}

function us:jsonlist2() {
    let (?iplist   = us:hostlist(),
         ?jsonlist = maplist(us:describe, ?iplist)) {
        return(?jsonlist)
    }
}

function us:hostlist() {
    let (select (aggregate(?key) as ?list) 
         where { 
          service <http://corese.inria.fr/sparql> {
            bind (ds:getPublicDatatypeValue(true) as ?map)
            bind (xt:get(?map, st:host) as ?host)
            values (?key ?value) { unnest(?host) }
         }}) {
    ?list
    }
}


# list of location of IP address
function us:location(?jsonlist) {
    maplist(us:locate, ?jsonlist)
}

# map(ip->nb)
# generate a list of IP address
function us:iplist(?map) {
    maplist(lambda((?key, ?value)) { ?key }, ?map)
}

# extract location from json description of IP address
function us:locate(?json) {
    let (?ip   = xt:get(?json, "ip"),
         ?pair = xt:get(?json, "loc"),
         ?lat  = strbefore(?pair, ","),
         ?lon  = strafter(?pair,  ",")) {
         xt:list(?ip, xsd:decimal(?lat), xsd:decimal(?lon))
    }
}

# call a service to get a json description of IP address
function us:describe(?ip) {
 let (?res  = xt:read(concat("https://ipinfo.io/", ?ip)),
      ?json = xt:json(?res)) {
      xt:print(?json, "\n") ;
      return(?json)
    }
}

# ?jsonlist: list of json description of IP address
# generate a map(slotvalue->nb)
function us:nbmap(?jsonlist, ?key) {
    let (?map = xt:map()) {
        for (?json in ?jsonlist) {
            let (?c = xt:get(?json, ?key)) {
                xt:set(?map, ?c, coalesce(1 + xt:get(?map, ?c), 1))
            }
        } ;
        #xt:set(?map, "total", xt:size(?jsonlist)) ;
        return (?map)
    }
}















function us:map() {
    let (?map = xt:map()) {
    map(lambda(?ip, ?map) { xt:set(?map, ?ip, 1) }, 
    xt:list(
    # IP address list
    ), xt:list(?map) );
        return (?map)
    }
}

function us:json(?json, ?key) {
    let (?str  = strafter(?json, concat("\"", ?key, "\": \"")),
         ?pair = strbefore(?str, "\"")) {
         return(?pair)
    }
}

