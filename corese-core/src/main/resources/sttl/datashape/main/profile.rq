prefix sh:   <http://www.w3.org/ns/shacl#> 
prefix fun:  <http://www.w3.org/ns/shacl#> 
prefix java: <http://www.w3.org/ns/shacl#>  
prefix doc:  <http://w3c.github.io/data-shapes/shacl/#>

# @compile <fr.inria.corese.extension.DataShape>  @path </user/corby/home/NetBeansProjects/corese-github/kgtool/src/main/java/fr/inria/corese/extension/>

# @import <http://ns.inria.fr/sparql-template/function/datashape.rq>

# @import <../../../function/datashape.rq>

@import <function/datashape/main.rq>  <function/datashape/target.rq> <function/datashape/path.rq> <function/datashape/operator.rq>

template st:profile {} where {}


@skip
function st:aggregate(out) {
  st:agg_and(out)
}

@skip
function st:default(term){
    true
}

@skip
function st:defaultNamed(term){
    true
}

#
# Template optimizer
# Results of graph ?shape { ?sh sh:property ?cst } are cached in table: ?sh -> Mappings
# Next evaluations are retrieved from cache: 40% faster
#
function st:optimize(shape, sh){
    true
}



# within xt:focus(?shape, sh:sibling())
# record sibling qualifiedValueShape in a table
function sh:sibling() {
    for (select  ?qsh ?list where {
            select ?qsh (aggregate(xt:list(?sibling, ?path)) as ?list) 
            where {
                select distinct ?qsh ?sibling ?path
                where {
                    ?root sh:property [ sh:qualifiedValueShape ?qsh ];
                        sh:property [ sh:qualifiedValueShape ?sibling ; sh:path ?path ]  
                    filter (?sibling != ?qsh)
                }
            }
            group by ?qsh
        } ) {
            if (bound(?qsh), st:cset(sh:sibling, ?qsh, ?list), true) 
    } ;
    return (true)
}





