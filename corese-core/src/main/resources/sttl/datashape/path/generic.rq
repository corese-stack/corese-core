#
# [] a sh:NodeShape ; sh:property ?sh . 
# ?sh sh:path ?p ; ?q ?m .
# ?ls = list of subjects of path ?p
#
# ?value may be bound in the boolean cases:
# ?sh sh:path ?p ; sh:or ([sh:class C1][sh:class C2])
#
# template sh:or enumerate objects of path and 
# for each object ?value : check the or 
# the or evaluates its elements by coming back here with ?value bound
# this is done to use the same templates whether ?value is bound or not
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls, ?p, ?value) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  values (?value ?shape ?sh) { (UNDEF UNDEF UNDEF) }
  
  values (?q ?m) { unnest(sh:getConstraint(sh:generic, ?shape, ?sh)) }  
    
  values ?s { unnest(?ls) }

  values ?o { unnest(if (bound(?value), ?value, sh:path(?shape, ?s, ?p))) }

  bind (coalesce(if (?q = sh:functioncst,  funcall(?m, ?shape, ?sh, ?s, ?p, ?o), funcall(?q, ?shape, ?o, ?m)), false) as ?suc )
  
  bind (
    if (?q in (sh:property), true, st:report(?q, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis))
    as ?b)
}

























