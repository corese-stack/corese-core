<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Oct 26 16:48:59 CEST 2017
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
template {

  str(?in)
  
}
where {
  bind (st:getFocusNode() as ?in)
  filter (
    datatype(?in)  in (xsd:integer, xsd:double, xsd:boolean)
  )
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {

  "{\"@list\": [" 
  
  group { 
    st:apply-templates(?e) 
    ; separator = ", "
  }
  
  "]}"
}
where {
  ?x ?p ?in
  filter isBlank(?in)
  filter (exists { ?in rdf:rest ?r } && not exists { ?y rdf:first ?in })
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# default literal template 
#
template  {

  "{"
    "\"@value\": \""   str(?in) "\", "
    "\"@type\": \""    st:turtle(datatype(?in)) "\""
  "}"
  
}
where {
  bind (st:getFocusNode() as ?in)
  filter (
    strstarts(datatype(?in), xsd:)
  )
  
}
pragma { kg:template kg:priority 100 }
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template  {

  "{"
    "\"@value\": \""       str(?in) "\", "
    "\"@language\": \""    lang(?in) "\""
  "}"
  
}
where {
  bind (st:getFocusNode() as ?in)
  filter (datatype(?in) = rdf:langString)
  
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template  {

  "{"
    "\"@value\": \""   str(?in) "\", "
    "\"@type\": \""    datatype(?in) "\""
  "}"
  
}
where {
  bind (st:getFocusNode() as ?in)
  filter (
    ! strstarts(datatype(?in), xsd:) &&
    ! strstarts(datatype(?in), rdf:) 
  )
  
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  "{\"@id\": \""  str(?in)  "\"}"
}
where {
  ?x ?p ?in
  filter isURI(?in)
}
limit 1
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {

  "{\"@id\": \""  str(?in)  "\"}"
  
}
where {
  ?x ?p ?in
  filter isBlank(?in)
  filter ( 
    not exists { ?in rdf:rest ?r } ||
	exists { ?y  rdf:first ?in }
  )
}
limit 1
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {

  ?in
  
}
where {
  bind (st:getFocusNode() as ?in)
  filter (datatype(?in) = xsd:string)
}
]]>
</body>
</rule>

</rdf:RDF>
