<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Oct 26 16:48:59 CEST 2017
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:not (?shape, ?sh, ?cst, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {

    values ?s { unnest(?ls) }
    bind (! sh:testShapeCore(?shape, ?cst, ?s) as ?suc)
    
    bind (st:report(sh:not, ?sh, ?shape, ?s, st:null, ?s,  ?suc, ?vis) as ?b)
  
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:or (?shape, ?sh, ?or, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }

    bind (sh:or(?or, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:or, ?sh, ?shape, ?s, st:null, ?s, ?suc, ?vis) as ?b)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:xone (?shape, ?sh, ?or, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }

    bind (sh:xone(?or, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:xone, ?sh, ?shape, ?s, st:null, ?s, ?suc, ?vis) as ?b)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:and (?shape, ?sh, ?and, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    values ?s { unnest(?ls) }
 
    bind (sh:and(?and, ?s, ?shape) as ?count)  
	bind (! bound(?count) AS ?failure) .
	bind (IF (?failure, false, ?count)  as ?suc)
	
    bind (st:report(sh:and, ?sh, ?shape, ?s, st:null, ?s, ?suc, ?vis) as ?b)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {}
where {}

function st:aggregate(?out) {
  st:agg_and(?out)
  #aggregate(?out, us:merge)
}

function us:merge(?list) {
    reduce(rq:and, ?list)
}

function st:default(?term){
    true
}

function st:defaultNamed(?term){
    true
}

function st:optimize(?shape, ?sh){
    true
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:property sh:path of shape ?sh
# ?list is the list of target nodes of shape ?sh
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:property ?cst  
        ?cst sh:path ?p 
        filter not exists { ?cst sh:deactivated true }
        # use case: sh:property [ sh:path p ; sh:property pp ]
        # filter not exists { ?sh sh:path ?pp }
    }
    
    bind (sh:path(?shape, ?cst, ?vis, ?list, ?p) as ?suc)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:path of shape ?sh
# ?list is the list of target nodes of shape ?sh
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:path ?p 
        filter not exists { ?sh sh:deactivated true}
    }
    
    bind (sh:path(?shape, ?sh, ?vis, ?list, ?p) as ?suc)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape { filter not exists { ?sh sh:path ?ppp } }
    
    bind (sh:hasConstraint(?shape, ?sh, ?vis, ?ls) as ?suc)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate  sh:and sh:or sh:not
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template  (?shape, ?sh, ?vis, ?ls) {
   st:call-template(?bool, ?shape, ?sh, ?cst, ?vis, ?ls)
}
where {
    graph ?shape {  
        values ?bool { sh:and sh:or sh:xone sh:not } 
        ?sh ?bool ?cst
    }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate closed sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {
    ?sh sh:closed true 
    optional { ?sh sh:ignoredProperties ?skip }
  }

  values ?s { unnest(?ls) }

  ?s ?p ?o
   
   bind (
                     exists { graph ?shape { ?sh sh:property [ sh:path ?p ]} }
    ||
    (bound(?skip) && exists { graph ?shape { ?skip rdf:rest*/rdf:first ?p } })
    
   as ?suc)
   
   bind (st:report(sh:closed, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
    
}
]]>
</body>
</rule>

</rdf:RDF>
