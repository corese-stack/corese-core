<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Mon May 06 09:01:36 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
prefix msh: <http://ns.inria.fr/shacl/>

template st:profile {}
where {}

function st:aggregate(?out) {
  st:agg_and(?out)
  #aggregate(?out, us:merge)
}

function us:merge(?list) {
    reduce(rq:and, ?list)
}

function st:default(?term){
    true
}

function st:defaultNamed(?term){
    true
}

function st:optimize(?shape, ?sh){
    true
}


function msh:fun(?name) {
    if (?name = sh:and,  msh:and,
    if (?name = sh:or,   msh:or, 
    if (?name = sh:xone, msh:xone,
    msh:not)))
}

function msh:not (?shape, ?sh, ?cst, ?vis, ?ls) {
    if (isExtension(?ls)) {
        let (?res = true) {
            for (?s in ?ls) {
                let (?suc = ! sh:testShapeCore(?shape, ?cst, ?s)) {
                    set(?res = ?res && ?suc);
                    st:report(sh:not, ?sh, ?shape, ?s, st:null, ?s,  ?suc, ?vis)
                }
            };
            return (?res)
        }
    }
    else {
        let (?suc = ! sh:testShapeCore(?shape, ?cst, ?ls)) {
            st:report(sh:not, ?sh, ?shape, ?s, st:null, ?ls,  ?suc, ?vis) ;
            return (?suc)
        }    
    }
}



function msh:and (?shape, ?sh, ?bool, ?vis, ?ls) {
    msh:boolean(sh:and, ?shape, ?sh, ?bool, ?vis, ?ls)
}

function msh:or (?shape, ?sh, ?bool, ?vis, ?ls) {
    msh:boolean(sh:or, ?shape, ?sh, ?bool, ?vis, ?ls)
}

function msh:xone (?shape, ?sh, ?bool, ?vis, ?ls) {
    msh:boolean(sh:xone, ?shape, ?sh, ?bool, ?vis, ?ls)
}


# ?oper = sh:and | sh:or 
function msh:boolean (?oper, ?shape, ?sh, ?bool, ?vis, ?ls) {
    if (isExtension(?ls)) {
        let (?res = true) {
            for (?s in ?ls) {
                let (?suc = msh:basic (?oper, ?shape, ?sh, ?bool, ?vis, ?s)) {
                    set (?res = ?res && ?suc)
                }
            } ;
            return(?res)
        }
    }
    else {
        msh:basic (?oper, ?shape, ?sh, ?bool, ?vis, ?ls)
    }
}

function msh:basic (?oper, ?shape, ?sh, ?bool, ?vis, ?s) {
    let (?suc = coalesce(funcall(?oper, ?bool, ?s, ?shape), false)){
        st:report(?oper, ?sh, ?shape, ?s, st:null, ?s, ?suc, ?vis);
        return (?suc)
    }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape { values ?sh { UNDEF } filter not exists { ?sh sh:path ?ppp } }
        
    bind (sh:hasConstraint(?shape, ?sh, ?vis, ?ls) as ?suc)
  
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate  sh:and sh:or sh:not
#
prefix msh: <http://ns.inria.fr/shacl/>
prefix sh:  <http://www.w3.org/ns/shacl#> 

template  (?shape, ?sh, ?vis, ?ls) {
    funcall(msh:fun(?bool), ?shape, ?sh, ?cst, ?vis, ?ls)
}
where {
    graph ?shape {  
        values ?bool { sh:and sh:or sh:xone sh:not } 
        ?sh ?bool ?cst
    }
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:property sh:path of shape ?sh
# ?list is the list of target nodes of shape ?sh
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:property ?cst  
        ?cst sh:path ?p 
        filter not exists { ?cst sh:deactivated true }
        # use case: sh:property [ sh:path p ; sh:property pp ]
    }
    
    bind (sh:path(?shape, ?cst, ?vis, ?list, ?p) as ?suc)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# evaluate sh:path of shape ?sh
# ?list is the list of target nodes of shape ?sh
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?list) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:path ?p 
        filter not exists { ?sh sh:deactivated true}
    }
    
    bind (sh:path(?shape, ?sh, ?vis, ?list, ?p) as ?suc)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
#  ?ls is the list of target nodes of shape ?sh
#  evaluate closed sh:constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {
    ?sh sh:closed true 
    optional { ?sh sh:ignoredProperties ?skip }
  }

  values ?s { unnest(?ls) }

  ?s ?p ?o
   
   bind (
                     exists { graph ?shape { ?sh sh:property [ sh:path ?p ]} }
    ||
    (bound(?skip) && exists { graph ?shape { ?skip rdf:rest*/rdf:first ?p } })
    
   as ?suc)
   
   bind (st:report(sh:closed, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
    
}
]]>
</body>
</rule>

</rdf:RDF>
