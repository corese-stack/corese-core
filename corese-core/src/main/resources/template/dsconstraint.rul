<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Jul 04 13:53:56 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:pattern (?shape, ?sh, ?vis, ?s, ?exp) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {  
    ?sh sh:pattern ?exp   
    optional { ?sh sh:flags ?flag }
  }
  bind ( 
    coalesce(
        ! isBlank(?s) && 
        if (bound (?flag), regex(?s, ?exp, ?flag), regex(?s, ?exp)), 
        false) 
  as ?suc )

  bind (st:report(sh:pattern, ?sh, ?shape, ?s, st:null, ?s, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# SPARQL Based Constraint
# Evaluate SPARQL query with pre-bind of variable $this with focus nodes
# SPARQL query returns solutions that fail the Constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 
template sh:sparql (?shape, ?sh, ?vis, ?s, ?cst) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:sparql ?cst 
        ?cst sh:select ?q
        filter not exists { ?cst sh:deactivated true }
        
        # collect prefix definitions
        # TBD: do it once and record it
        {
            select ?cst 
              (group_concat(concat("prefix ", ?pr, ": <", str(?ns), ">") ;  separator="\n") 
              as ?define) 
            where {
                ?cst sh:prefixes ?ns
                [] sh:declare [ sh:prefix ?pr ; sh:namespace ?ns ] 
            }
            group by ?cst
        }
    }
    
    values ($this ?path ?value) { unnest(kg:sparql(concat(?define, ?q), "$this", ?s)) }

    # SPARQL query returns solutions that fail
    bind (false as ?suc)
    
    bind (st:report(sh:sparql, ?cst, ?shape, ?s, ?path, ?value, ?suc, ?vis) as ?b)
    
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 


@import <function/datashape/main.rq> <function/datashape/path.rq> <function/datashape/operator.rq> 


template st:profile {}
where {}

function st:aggregate(out) {
  st:agg_and(out)
}

function st:default(term){
    true
}

function st:defaultNamed(term){
    true
}

function st:optimize(shape, sh){
    true
}


function sh:class (shape, sh, vis, s, ?c) {
    let (suc = exists { ?s rdf:type/rdfs:subClassOf* ?c } ) {
        st:report(sh:class, sh, shape,  s, rdf:type, s, suc, vis) ;
        return (suc)
    }
}


function sh:disjoint (shape, sh, vis, s, p) {
    let (l = sh:path(shape, s, p), suc = ! xt:member(s, l)) {
        st:report(sh:disjoint, sh, shape, s, p, s, suc, vis) ;
        return (suc)
    }
}

function sh:equals (shape, sh, vis, s, p) {
    let (l  = sh:path(shape, s, p),
         b1 = sh:equals1(shape, sh, vis, s, p, l),
         b2 = sh:equals2(shape, sh, vis, s, p, l)) {
            return (b1 && b2)
    }
}


function sh:equals1 (shape, sh, vis, s, p, l) {
    let (suc = xt:member(s, l)) {
        st:report(sh:equals, sh, shape, s, p, s, suc, vis) ;
        return (suc)
    }
}

function sh:equals2 (shape, sh, vis, s, p, l) {
    let (res = true) {
        for (m in l) {
            let (suc = s = m) {
                st:report(sh:equals, sh, shape, s, p, m, suc, vis);
                set (res = res && suc)
            }
        } ;
        return (res)
    }
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
    #st:call-template(?q, ?shape, ?sh, ?vis, ?s, ?m)
    funcall(?q, ?shape, ?sh, ?vis, ?s, ?m)
}
where {
  graph ?shape {  
    values ?q { sh:class sh:disjoint sh:equals }
    ?sh ?q ?m            
  }
  
  values ?s { unnest(?ls) }
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {  
    values ?q { 
        sh:hasValue sh:datatype sh:minInclusive sh:minExclusive sh:maxInclusive sh:maxExclusive sh:minLength sh:maxLength sh:nodeKind sh:node sh:in sh:languageIn 
    }
    ?sh ?q ?m  
  }
  
  values ?s { unnest(?ls) }
    
  bind (coalesce(sh:functioncall(?q, ?shape, ?s, ?m), false) as ?suc )
  
  bind (st:report(?q, ?sh, ?shape, ?s, st:null, ?s, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls) {
    st:call-template(?q, ?shape, ?sh, ?vis, ?s, ?m)
}
where {
  graph ?shape {  
    values ?q {  sh:pattern sh:sparql }
    ?sh ?q ?m            
  }
  
  values ?s { unnest(?ls) }
}


]]>
</body>
</rule>

</rdf:RDF>
