<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 21 13:43:42 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
#
# Argument  ?n is the name of query (st:minus)
# ?q actual query, ?t query template, ?s query solution
# generate a sequence of html select according to query st:select specifications
#
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>

template st:selecttable(?n, ?q, ?t, ?s, ?qt) {
   format { 
        ft:table.html
        group { 
            # silent input for key
            if (strlen(?mykey)>0, st:format(ft:silent.html, ?myname, ?mykey), "")

            if (strlen(?myname)>0 && strlen(?mykey)=0, 
                # std silent input
                st:format(ft:silent.html, ?myname, ?myvalue),
                # html select
                st:format(?format, ?title, 
                    st:call-template(st:selectparam, ?n, ?select, 
                        # 2 index + 1 because st:select with st:key generates 1 silent input + 1 html select
                        # and the key (in silent input) is also in the parameter value list
                        # hence we need to consider the index of the key
                        if (strlen(?mykey)>0, 2 * ?index + 1, ?index))))
        }      
    }
}
where {
    {select ?n 
    # list of html select specifications
    (aggregate(xt:list(?n, ?select, ?mytitle, ?format, ?myindex, ?myrepeat, ?myname, ?myvalue, ?mykey)) 
     as ?list)
    where {
        bind (st:get(st:context) as ?g)
        graph ?g {  
        ?qt st:name ?n 
        optional { 
            ?qt st:select ?select
            optional { ?select st:title ?title }
            # st:type st:oper | st:arg
            optional { ?select st:type ?type  filter (?type != st:silent) }
            # index of html select value in parameter value list
            optional { ?select st:index ?index }
            # repeat oper+arg sequence n times
            optional { ?select st:repeat ?repeat }
            # generate silent input with name=name value=value
            optional { ?select st:type st:silent ; st:name ?name ; st:value ?value }
            # generate silent input with name=name value=key in addition to html select
            # use case: param = (key value key value) and value is in (next) html select
            optional { ?select st:name ?name ; st:key ?key }
           
            bind (coalesce(
                if (?type = st:oper, ft:selectparameterrowoper.html,
                if (?type = st:arg,  ft:selectparameterrowarg.html,
                    ft:selectparameterrow.html)), ft:selectparameterrowsimple.html) 
            as ?format)
            
            bind (coalesce(?title, "") as ?mytitle)
            bind (coalesce(?index, -1) as ?myindex)
            bind (coalesce(?repeat, 0) as ?myrepeat)
            bind (coalesce(?name, "")  as ?myname)
            bind (coalesce(?value, "") as ?myvalue)
            bind (coalesce(?key, "")   as ?mykey)
            }
        }
    }}

    # us:expand repeat (oper arg) n times when select oper has st:repeat n
    # values iterate html select specifications, possibly with additional oper+arg
    values (?n ?select ?title ?format ?index ?repeat ?myname ?myvalue ?mykey) { unnest(us:expand(?list)) }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# SPARQL Tutorial
# st:get(st:uri) is the URI of a query to execute 
# Transformation is used 1) to select and execute query and 2) to display the result of the query
# RDF graph is either RDF dataset or Query Result
# Query definitions are stored in st:context named graph 
# Transformation is used by server with a profile, see mapprofile.ttl
# Transformation exploits a workflow.ttl dataset with predefined queries and html select definitions
# associated to queries
# Transformation generates html select, according to specifications, that enable user to
# select parameter value such as a type. The query takes these parameter value into account
# Parameter value are passed to query using the Context and st:get/st:set
# Parameter value are managed as list of string value.
#
template st:start {

  st:call-template(st:head)
    
  st:call-template(st:selectform, ?uri)
  
  st:call-template(st:display, ?uri)
  
  #st:call-template(st:result)
  # when query is template, TransformerProcess set ?templateResult global variable
  coalesce(us:templateResult(), st:call-template(st:result))


  st:call-template(st:tail)

}
where {

  bind (coalesce(st:get(st:uri), st:intro) as ?uri)

}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:content {
  
  st:call-template(st:content2, "Data:",   st:data)
  st:call-template(st:content2, "Schema:", st:schema)
  st:call-template(st:content2, "Query:",  st:context)
}
where {
    
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Display result of query
# RDF graph is a result graph
#

prefix spq: <http://ns.inria.fr/sparql-template/sparql#>
template st:result {

   st:apply-templates-with(?sttl)
    
}
where {
  bind (st:get(st:query) as ?query)
  bind (coalesce(st:get(st:sttl), spq:result)  as ?sttl)
  filter bound(?query)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:prev(?t) {

format {
  ft:prev.html
  st:plink(?n)
  }
  
}
where {
  bind (st:get(st:context) as ?g)
  
  graph ?g {
    ?q1 st:name ?t ; st:index ?i ; st:query ?text
    bind (?i - 1 as ?j)
    ?q2 st:index ?j ; st:query ?text2 ;
	st:name ?n 
  }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:tail {
format {
  ft:tail.html
  
  st:call-template(st:content)
}
}
where {
    bind (st:get(st:context) as ?g)
    graph ?g {
       ?ds a st:Dataset
    }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:next(?t) {

format {
  ft:next.html
  st:plink(?n)
 }
    
}
where {
  bind (st:get(st:context) as ?g)
  
  graph ?g {
    ?q1 st:name ?t ; st:index ?i ; st:query ?text
    bind (?i + 1 as ?j)
    ?q2 st:index ?j ; st:query ?text2 ;
	st:name ?n 
  }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {
   
}
where {}
 
  function st:proto() {
    coalesce(st:get(st:protocol), st:std)
  }
  
function us:templateResult() {
    return(?templateResult)
}

# alist = ((name select title format index repeat))
# when repeat > 1, repeat ith oper select and i+1th arg select n times
# modify alist with generated additional html select

function us:expand (alist) {
    letdyn (res = xt:list(), skip = false, num = 0, mylist = alist) {
        map (function(elem) {
            let ((name aselect title aformat index repeat myname myvalue mykey) = elem) {
                if (skip) {
                    # skip arg html select specification that has been processed by repeat below
                    set(skip = false)
                }
                else if (repeat <= 1) {
                    xt:add(res, elem);
                }
                else {
                    # skip next arg html select because it is processed here
                    set (skip = true);
                    let ((name2 aselect2 title2 format2 index2 repeat2 myname2 myvalue2 mykey2) = xt:get(mylist, num+1)) {
                        for (i in xt:iota(0, repeat - 1)) {
                            # generate additional oper html select
                            xt:add(res, xt:list(name, aselect, title,    aformat, index  + 2*i, repeat, myname, myvalue, mykey));
                            # generate additional arg html select
                            xt:add(res, xt:list(name2, aselect2, title2, format2, index2 + 2*i, repeat2, myname2, myvalue2, mykey2))
                        }
                    }
                } ;
                set (num = num + 1)
            }
        },
        alist);
        
        return (res)
    } 
}


# st:get(?name)      name=mode   when parameter string list
# st:get(?paramURI)  paramURI=st:mode when parameter string (first value of list)  
# compute if option value equal to current param value 
function us:equal(name, paramURI, index, value) {
    coalesce(
        # option is selected or not
        if (index >= 0 && xt:size(st:get(name)) > index, 
            # compare current option value with param value at position=index in param value list st:get(?name)
            str(value) = str(xt:get(st:get(name), index)),
            if (isURI(value),
                st:get(paramURI) = value || st:get(paramURI) = str(value),
                st:get(paramURI) = str(value))),
        false)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Select a query name to display and execute
# query name bound to uri param
# Generate query names list from context graph
#
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:selectform(?t) {

format {

  ft:selectform.html
  
  st:get(st:service) 
  st:get(st:profile)   
  st:call-template(st:prev, ?t)  
  st:call-template(st:list, ?t)  
  st:call-template(st:next, ?t)
}
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate a form with a SPARQL query ?q to submit
# Argument  ?n is the name of query (st:minus)
# ?q actual query, ?t query template, ?s query solution
#
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>

template st:form(?n, ?q, ?t, ?s, ?qt) {
   format { ft:form.html
    st:get(st:service) 
    st:get(st:profile)
    str(?t) 
    str(?s) 
    ?n 
    if (?s = st:null, "", st:format(ft:nav.html))
    st:call-template(st:selecttable, ?n, ?q, ?t, ?s, ?qt)
    if (bound(?b), st:format(ft:andor.html), "")
    str(?q)
    }
}
where {
    bind (st:get(st:context) as ?g)
    graph ?g {  
        ?qt st:name ?n 
        optional { ?qt st:button st:andor, ?b}
    }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate query names list from context graph
#
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:list(?t) {

format {
  if (?q = ?t, ft:optionselected.html, ft:option.html) 
  
  ?q
  str(?i)
  str(?title)
}
   
}
where {
  bind (st:get(st:context) as ?g)
  graph ?g {
  values ?qt {st:Query sw:Query}
    [] a ?qt ;
      st:index ?i ;
      st:name ?q ;
      rdfs:label ?title
  }
}
order by ?i
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:content2(?t, ?p) {

  str(?t) "<br/>"  
  
  group distinct { 
    "<a href='" str(?d) "'>" str(?d) "</a>" 
    ; separator="<br/>"
  } 
  
  "<br/>"
 
}
where {
  bind (st:get(st:context) as ?g)
  graph ?g {
    ?ds a st:Dataset
    ?ds ?p [ st:uri ?d ]
  }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate html select option sequence, ?n = query name 
# ?select is the URI/bnode of the selector 
# Use a context graph for select values
# context graph has a sw:name st:graphName in content workflow (see tutohal service in profile.ttl)
# specify context graph with st:param [ st:export true ; st:contextlist(st:graphName) ]
# index is the index of the selector if any
# use case: mode with value list managed as st:get("mode") in context
#
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>

template st:selectparam(?n, ?select, ?index) {

format {
  if (?insert, ft:selectparameterinsert.html , ft:selectparameter.html) 
  
  if (bound(?oper), "myselectoper", "myselectarg")
  
  ?name
  
  # possibly add a default option value as first option
  if (bound (?default), 
    st:format(
        us:option (us:equal(?name, ?uri, ?index, ?default)), # st:get(?uri, ?default),             
        ?default, coalesce(?label, "Any")),
    "")
      
  group { 
    # generate one select option
    format { 
        us:option (us:equal(?name, ?uri, ?index, ?value))
        ?value ?value
    } 
  }
}
   
}
where {
  bind (st:get(st:context) as ?g)
  
  # ?name = "mode" ; ?uri = st:mode ; st:get(st:mode) = current value of parameter mode
  
  graph ?g { 
    ?select st:name ?name ; st:uri ?uri 
    optional { ?select st:type ?oper filter (?oper = st:oper) }
    optional { ?select st:default ?default optional { ?select st:defaultLabel ?label }}
    optional { ?select st:action ?action }
    bind (coalesce(?action = st:insert, false) as ?insert)
  }
  
  {
    graph ?g {
        ?select st:value/st:enum?/rdf:rest*/rdf:first ?value 
    }
  }
  union 
  {
    graph ?g { 
        ?select st:graph ?gname 
        
        # get graph object ?gg in context corresponding to graph name ?gname
        bind (st:get(?gname) as ?gg)
        filter bound(?gg)
        
         { ?select st:relation ?p 
           graph ?gg { 
            select distinct ?p ?value 
            where { 
                {?x ?p ?value}
                union
                {?value ?p ?x}
                filter (! isBlank(?value)) 
            }  
            order by ?value }
        }
        union 
        { ?select st:predicate ?p 
           graph ?gg { 
            select distinct ?p ?value 
            where { ?x ?p ?value  filter (! isBlank(?value)) }  
            order by ?value }
        }
        union 
        { ?select st:predicate [ ?p ?object ] 
          graph ?gg { 
            select distinct ?p ?object ?value 
            where { ?value ?p ?object } 
            order by ?value }
        }
    }            
   }
   union
   {
    graph ?g { 
        ?select st:graph ?gname ; st:function ?fun 
        
        # get graph object ?gg in context corresponding to graph name ?gname
        bind (st:get(?gname) as ?gg)
        filter bound(?gg)
        
        values ?value { unnest (xt:focus(?gg, funcall(?fun))) }
        
    }
  }
}

function us:option(?b) {
    if (?b, ft:valueselected.html, ft:value.html)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:head {
   
  format {
    ft:head.html  str(?title)
  }
  
}
where {
  bind (coalesce(st:get(st:title), "Tutorial") as ?title)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# ?n is the st:name of a query
# get definition of query in context graph
# display query and eventually result of query
# st:get(st:query) is user query
# ?q is tutorial query
#
#prefix ft: </user/corby/home/AAServer/data/format/mytutorial/>
prefix ft: <http://ns.inria.fr/sparql-template/format/mytutorial/>
template st:display(?n) {

format {
   ft:display.html

   str(?l)
   str(?c)   
   if (bound(?r), st:format(ft:documentation.html, str(?r)), "")
   
   st:call-template(st:form, 
     ?n,
     coalesce(st:get(st:query), str(?q)), 
     str(?q), 
     coalesce(?s, st:null),
     ?qt
     ) 
 }
      
}
where {
  # named graph that contains definition of queries
  bind (st:get(st:context) as ?g)
  graph ?g {
    ?qt st:name    ?n ;
      rdfs:label   ?l ;
      rdfs:comment ?c ;
      st:query/st:value?  ?q   filter isLiteral(?q)
      optional { ?qt st:reference ?r }
      optional { ?qt st:solution  ?s }
      optional { ?qt sw:body  ?s }
      filter(lang(?c) = (coalesce(st:get(st:lang), "fr")))
  }
}
]]>
</body>
</rule>

</rdf:RDF>
