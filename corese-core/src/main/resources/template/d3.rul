<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Oct 12 08:57:27 CEST 2018
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
template st:map {
    st:call-template-with(st:navlab, st:map, ?list)        
} 
where {
    bind (st:get(st:pos) as ?list)
    filter (bound(?list) && xt:size(?list) > 0)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:graph {
  str(?node)
  ","
  str(?edge)
} 
where {
    bind (xt:print('graph size', xt:size(xt:graph())) as ?tmp)
    
    bind (us:start() as ?start)
    
    bind (st:call-template(st:edges) as ?edge)
    
    bind (st:call-template(st:nodes) as ?node)
    
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix ft: <http://ns.inria.fr/sparql-template/format/d3/>
template st:start {
  format {
      ft:graph.html
      st:call-template(st:graph)
  }
} 
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix ft: <http://ns.inria.fr/sparql-template/format/d3/>
template st:frame(?pretty) {

  if (bound(?title), st:format("<h2>%s</h2>", str(?title)), "")
  if (bound(?uri),   st:format("<h3>URI: %s</h3>", str(?uri)), "")

  format {
      ft:frame.html
      ?id
      st:call-template(st:graph)
  }
} 
where {
    bind (if (bound(?pretty), us:declare(?pretty), true) as ?tmp)
    bind (substr(replace(rand(), "\\.", ""), 0, 5) as ?id)
    bind (st:get(st:title) as ?title)
    bind (st:get(st:get(st:uriparam)) as ?uri)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:nodes {
  "\"nodes\":[\n"
  group {
  
     format {
            '{"id": "%s", "label": "%s", "group": "%s", "class": "%s" %s %s}'        
            ?id us:label(?s) us:kind(?s) us:nodeClass(?s) 
             if (isURI(?s), us:uri(?s), "")
            coalesce(st:format(', "bg_image": "%s"', st:cget(st:img, ?s)), "")
      }
        
    ; separator = ",\n"
  }
  "\n]\n"
} 
where {
   values (?s ?id) { unnest(us:getNodes()) }
}


# st:link : service?uri=...&profile=...
# st:url  : URL either ?s itself or a proxy URL
function us:uri(?s) {
    coalesce(
        st:format(', "link": "%s"', st:cget(st:link, ?s)),
        st:format(',  "url": "%s"', coalesce(st:cget(st:url, ?s), ?s))
    )
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:profile {}
where {}

function us:start() {
    set(?map = xt:map())
}

function us:kind(?s) {
    if (st:cget(st:group, ?s, st:other), 2,
    if (isURI(?s), 1, 
    if (isBlank(?s), 2, 3)))
}

function us:record(?s) {
   xt:set(?map, ?s, coalesce(xt:get(?map, ?s), concat('n', xt:size(?map))))
}

function us:get(?s) {
    xt:get(?map, ?s)
}

function us:getNodes() {
    return (?map)
}

function us:declare(?fun) {
    set(?pretty = ?fun)
}

function us:label(?s) {
    if (bound(?pretty), us:pretty(funcall(?pretty, ?s)), us:pretty(?s))
}

function us:pretty(?s) {
    if (isBlank(?s), "",
    if (isLiteral(?s), us:literal(?s), us:uri(?s)))
}

function us:uri(?u) {
    if (contains(?u, ".jpg"), us:shorten(st:turtle(?u, true)), st:turtle(?u, true))
}

function us:shorten(?l) {
    let (?s = if (strlen(?l) > 50, concat(substr(?l, 1, 50), "..."), ?l)) { ?s }
}

function us:literal(?l) {
    let (?s = us:shorten(?l)) {
        replace(replace(str(?s), "\n", ""), "\"", "'")
    }
}

function us:nodeClass(?s) {
    coalesce(st:getclass(?s), 
        if (isLiteral(?s), "literal", if (isURI(?s), "uri", "bnode") ) )
} 


function us:edgeClass(?g, ?p) {
    coalesce(st:getclass(?g),
        if (strstarts(?p, rdf:),  "rdf", 
        if (strstarts(?p, rdfs:), "rdfs", 
        if (strstarts(?p, owl:),  "owl", 
        "default") ) ))
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:edges {
  "\"edges\":[\n"
  
  group { 
  
    format {
        '{"source": "%s", "target": "%s", "label": "%s", "id": "e%s", "class": "%s" }'
        us:get(?s) us:get(?o) us:label(?p) kg:number() us:edgeClass(?g, ?p)
    }
    
    ; separator = ",\n"
  }
  
  "\n]\n"
} 
where {
    select * where {
        graph ?g { ?s ?p ?o }
        bind (us:record(?s) as ?ss)
        bind (us:record(?o) as ?oo)
    } 
    limit 10000
}
]]>
</body>
</rule>

</rdf:RDF>
