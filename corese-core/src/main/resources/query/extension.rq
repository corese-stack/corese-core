prefix sh: <http://www.w3.org/ns/shacl#>

@public { 

# Specify focus node of transformation 
# default is st:get(st:uri) as usual
# no focus :
# st:param [ st:focus false ]
# focus on st:get(st:elem)
# st:param [ st:focus st:elem ]
function st:focus(){
    st:get(coalesce(st:get(st:focus), st:uri))
}

function xt:turtle() {  
    st:apply-templates-with(st:turtle)
}

function xt:turtle(?x) {  
    if (isLiteral(?x) && datatype(?x) = dt:graph){
        xt:focus(?x, st:apply-templates-with(st:turtle))
    }
    else {
        st:apply-templates-with(st:turtle, ?x)
    }
}

function xt:rdfxml() {  
    st:apply-templates-with(st:rdfxml)
}

function xt:owl() {  
    st:apply-templates-with(st:owl)
}

function xt:owl(?x) {  
    st:apply-templates-with(st:owl, ?x)
}

function st:list(?t) { 
    let (?l = st:call-template-with(st:list, st:list, ?t)){
        if (! isLiteral(?l) || datatype(?l) != dt:list){
            xt:list(?l) }
        else { ?l }
    }
}

function xt:rdftolist(?l) {
  let (
    select ?l 
      (aggregate(if (?b, xt:rdftolist(?e), 
                 if (?e = rdf:nil, xt:list(), ?e))) as ?list) 
    where {
        ?l rdf:rest*/rdf:first ?e
        bind (exists { ?e rdf:rest ?a } as ?b)
    }) {
    ?list
  }
}




function xt:conform(?g) {
    xt:focus(?g,
    let (select * where { ?x sh:conforms ?b } ) {
        ?b
    }
    )
}

function us:ldGraph(?shape) {
    if (isURI(?shape), xt:load(?shape), ?shape)
}


function xt:shapeGraph(?shape) {
    st:call-template-with(st:dsmain, st:start, us:ldGraph(?shape)) ;
    return (st:visitedGraph())
}

function xt:shapeGraph(?shape, ?sh) {
    st:call-template-with(st:dsmain, st:main, us:ldGraph(?shape), sh:shapeGraph, ?sh) ;
    return (st:visitedGraph())
}


function xt:shapeNode(?shape, ?uri) {
    st:call-template-with(st:dsmain, st:main, us:ldGraph(?shape), sh:shapeNode, ?uri) ;
    return (st:visitedGraph())
}

function xt:testShapeNode(?shape, ?uri) {
    let (?g = xt:shapeNode(?shape, ?uri)) {
        xt:conform(?g)
    }
}

function xt:shapeNode(?shape, ?sh, ?uri) {
    st:call-template-with(st:dsmain, st:main, us:ldGraph(?shape), sh:shapeNode, ?uri, ?sh) ;
    return (st:visitedGraph())
}

function xt:profileowlrl() {
    st:call-template-with(st:owlrl, st:main) 
}


}

