#
# Data Shape Property Path Interpreter
# PP expressions are searched in graph ?shape 
#
# Olivier Corby - Wimmics Inria I3S - 2016-2019
#

prefix sh:   <http://www.w3.org/ns/shacl#> 


# PPath interpreter Extension 


# generic filter function for all filters
# path = (sh:pattern 'dbpedia')
function dt:list sh:filter(shape, s, path, inv, url) {
    if (sh:evalfilter(shape, s, path), xt:list(s), xt:list())
}

function sh:evalfilter(shape, node, exp) {
    let ((oper arg) = exp) {
        funcall(oper, shape, node, arg)
    }
}

function sh:pattern(shape, node, arg) {
    regex(node, arg)
}


function sh:myand(shape, node, list) {
    # oper = sh:filter ; arg = (name param)
    letdyn(varshape = shape, varnode = node){
        mapevery(lambda((oper, exp)) { sh:evalfilter(varshape, varnode, exp) }, list)
    }
}

function sh:myor(shape, node, list) {
    # oper = sh:filter ; arg = (name param)
    letdyn(varshape = shape, varnode = node){
        mapany(lambda((oper, exp)) { sh:evalfilter(varshape, varnode, exp) }, list)
    }
}

function sh:mynot(shape, node, list) {
    # oper = sh:filter ; arg = (name param)
    letdyn(varshape = shape, varnode = node){
        ! mapany(lambda((oper, exp)) { sh:evalfilter(varshape, varnode, exp) }, list)
    }
}


# ***********************************************


# sh:path (us:location [ sh:ldpath (rdf:type) ])
# ?path = (rdf:type)
function dt:list sh:ldpath(?shape, ?s, ?path, ?inv, url) {
    let ((?p ?q) = ?path) {
    if (bound(?q), 
        sh:myldpath(?s, ?p, ?q), 
        sh:myldpath(?s, ?p))
    }
}

# dereference URI ?s and compute path ?p on graph URI
function dt:list sh:myldpath(?s, ?p){
    let (?g = xt:load(?s, st:nt, st:turtle)) {
        let (select ?g ?s ?p (aggregate(?o) as ?l) where  { graph ?g { ?s ?p ?o }}){
            if (us:trace(), xt:print("ldpath:", ?s, ?p, ?l), false);
            return(?l)
        }
    }
}

function dt:list sh:myldpath(?s, ?p, ?q){
    let (?g = xt:load(?s, st:nt, st:nt)) {
        let (select ?g ?s ?p ?q (aggregate(?o) as ?l) where  { graph ?g { ?s ?p [ ?q ?o ] }}){
        if (us:trace(), xt:print("ldpath:", ?s, ?p, ?q, ?l), false);
            return(?l)
        }
    }
}

function us:trace() {
    return (coalesce(traceService, set(traceService = false)))
}



# ***********************************************
# sh:service (<uri> rdf:type)



#
# (ai:location [ <http://dbpedia.org/sparql> (rdf:type ) ] )
# arg = (<http://dbpedia.org/sparql> rdf:type )
#
# Path p and p/q are processed here. 
# Other path processed recursively by ppath interpreter with argument url = server URI
#
function dt:list sh:service(shape, node, arg, inv, url) {
    #if (us:trace(), xt:print("service1:", node, arg), false);
    if (isBlank(node)) { return (xt:list()) } ;
    let ((server | path) = arg,
         (pp qq)  = path) {
         if (us:trace()) { xt:print("service:", server, node, path) };
         let (list = 
                if (xt:size(path) = 2 && isURI(pp) && isURI(qq), 
                    sh:myservice(server, node, pp, qq), 
                if (xt:size(path) = 1 && isURI(pp), 
                    sh:myservice(server, node, pp),
                sh:evalpath(shape, node, xt:list(sh:sequence, path), inv, server)))) 
            {
            if (us:trace()) {xt:print("service list:", list) } ;
            return (list)
        }
    }
}

# Simple path p
function dt:list sh:myservice(?uri, ?s, ?p) {
    let (select * (aggregate(?o) as ?l) where { service ?uri { ?s ?p ?o } }) {
        return (?l)
    }
}

# Simple path p/q
function dt:list sh:myservice(?uri, ?s, ?p, ?q) {
    #if (us:trace(), xt:print("service2:", ?p, ?q), false);
    let (select * (aggregate(?o) as ?l) where { service ?uri { ?s ?p [ ?q ?o ] } }) {
        return (?l)
    }
}


# (ai:location [ <http://dbpedia.org/sparql> (rdf:type ) ] )
# ?arg = (<http://dbpedia.org/sparql> rdf:type )
#
function dt:list sh:service2(shape, node, arg, inv, url) {
    #if (us:trace(), xt:print("service1:", node, ?arg), false);
    
    let ((server | path) = arg) {
        xt:print("service:", node, server, arg); 
        sh:evalpath(shape, node, xt:list(sh:sequence, path), inv, server)
    }
}



