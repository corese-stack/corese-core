#
# SHACL Interpreter 
#
# Olivier Corby - Wimmics Inria I3S - 2016-2019
#

prefix sh:  <http://www.w3.org/ns/shacl#> 
prefix xsh: <http://www.w3.org/ns/shacl#> 
prefix msh: <http://ns.inria.fr/shacl/>

function sh:constraint(shape, sh, vis, nodeList) {
    let (b1 = sh:constraint1 (shape, sh, vis, nodeList),
         b2 = sh:constraint2 (shape, sh, vis, nodeList),
         b3 = sh:cstpattern  (shape, sh, vis, nodeList),
         b4 = sh:nodeextension(shape, sh, vis, nodeList),
         b5 = sh:cstsparql   (shape, sh, vis, nodeList)
         ) {
        return (b1 && b2 && b3 && b4 && b5)
    }
}

# shape sh has several operators with value, ex: oper=sh:datatype value=xsd:string
# operator defined as a function (in operator.rq) with same name
# operator executed as funcall(oper, value)
# list of (oper value) is computed once for each shape sh and stored in a table 
# sh:getConstraint retrieve the list (oper value)
# nodeList is either a list of nodes or a single node
# sh:report generates a validation report in case of error
#
function sh:constraint1 (shape, sh, vis, nodeList) {
    let (res = true) {
        for ((oper value) in sh:getConstraint(sh:cstgeneric1, shape, sh)) {  
            for (node in dt:list(nodeList)) {    
                let (suc = coalesce(funcall(oper, shape, node, value), false)) {
                        sh:report(oper, sh, if (oper = sh:node, value, st:null), shape, node, st:null, node, suc, vis) ;
                        if (suc, true, set(res = false))
                    }
            }
        } ;
        return (res)
    }
}

# oper = xsh:function
function sh:nodeextension (shape, sh, vis, nodeList) {
    let (res = true) {
        for ((oper name value) in sh:getConstraint(sh:nodeextension, shape, sh)) {  
            for (node in dt:list(nodeList)) {    
                let (suc = coalesce(
                        funcall(name, node, value),
                        false)) {
                        sh:report(oper, sh, name, shape, node, st:null, node, suc, vis) ;
                        if (suc, true, set(res = false))
                    }
            }
        } ;
        return (res)
    }
}


function sh:constraint2 (shape, sh, vis, nodeList) {
    let (res = true) {
        for ((oper value) in sh:getConstraint(sh:cstgeneric2, shape, sh)) {  
            for (node in dt:list(nodeList)) {    
                let (suc = coalesce(funcall(oper, shape, sh, vis, node, value), false)) {
                    if (suc, true, set(res = false))
                }
            }
        } ;
        return (res)
    }
}

function sh:cstpattern (shape, sh, vis, nodeList) {
    let (res = true) {
        for ((oper flag) in sh:getConstraint(sh:cstpattern, shape, sh)) {  
            for (node in dt:list(nodeList)) { 
                let (suc = !isBlank(node) && coalesce(
                        if (isURI(flag), regex(node, oper), regex(node, oper, flag)),
                        false)) {    
                    sh:report(sh:pattern, sh, shape, node, st:null, node, suc, vis);
                    if (!suc) {
                        set(res = false) 
                    }
                }
            }
        } ;
        return (res)
    }
}




#
# Retrieve properties of constraints, thay are stored in a map by getConstraint
#
# 

function sh:cstpattern(shape, sh) {
    let (select ?shape ?sh (aggregate(xt:list(?exp, coalesce(?flag, st:null))) as ?list) where {
        graph ?shape {  
            ?sh sh:pattern ?exp   
            optional { ?sh sh:flags ?flag } 
        }
    } ) {
        return(list)
    }
}


function sh:getGenericShape(shape, sh, list) {
    let (select ?shape ?sh ?list (aggregate(xt:list(?oper, ?value)) as ?res) where {
        graph ?shape {  
            values ?list {UNDEF}
            values ?oper { unnest(?list) }
            ?sh ?oper ?value    
        }
    } ) {
        return(res)
    }
}





# xsh:function [ us:fun (h:age 50) ]
# xsh:function [ us:fun () ]
# xsh:function us:fun
# xsh:evaluate (rq:gt h:age (rq:mult 2 h:shoesize)) -> xsh:function [ ... ]
# list = (sh:evaluate sh:compute ...)
#
function sh:getShapeExtension(shacl, sh, list) {
    let (select ?shacl ?sh ?list
            (aggregate(
                xt:list(xsh:function, ?name, ?arg, ?ternary)
            ) as ?res) 
        where {
            graph ?shacl {  
                {   values ?list {UNDEF}
                    ?sh ?name ?value 
                    filter xt:member(?name, ?list)
                }
                union { values ?list {UNDEF}
                    ?sh  xsh:function ?fun optional { ?fun ?oper ?param } 
                    bind (coalesce(?oper, ?fun) as ?name)
                    bind (coalesce(?param, xt:list()) as ?value)
                }
                bind (sh:compile(?name, sh:getValueList(?value)) as ?arg)
                # used in path.rq
                bind (xt:isFunction(?name, 3) as ?ternary)
            }
        } ) {
        return(res)
    }
}



# (fun x y) -> (fun (x y))
function sh:compile(name, exp) {
    if (name in (xsh:evaluate, xsh:compute), sh:compile(exp), exp)
}


# (fun x1 x2) -> (fun (x1 x2))
#
function sh:compile(exp) {
    if (isExtension(exp)) {
        if (xt:size(exp) = 0) {
            return (exp)
        }
        else {
            let ((oper | param) = exp) {
                xt:list(oper, maplist(sh:compile, param))
            }
        }
    }
    else {
        exp
    }
}

function sh:getValueList(value) {
    if (isBlank(value)) {
       coalesce(sh:reclist(value), value)
    }
    else {
        return(value)
    }
}

function sh:reclist(l) {
  let (select ?l 
       (aggregate (if (?b, sh:reclist(?e), 
                   if (?e = rdf:nil, xt:list(), ?e))) as ?list) 
        where {
            ?l rdf:rest*/rdf:first ?e
            bind (exists { ?e rdf:rest ?a } as ?b)
        } ) {
    return (list)
  }
}


function sh:cstgeneric1(shape, sh) {
    sh:getGenericShape(shape, sh, sh:getShape(sh:node1))
}

function sh:cstgeneric2(shape, sh) {
    sh:getGenericShape(shape, sh, sh:getShape(sh:node2))
}

function sh:nodeextension(shape, sh) {
    sh:getShapeExtension(shape, sh, sh:getShape(sh:nodeextension))
}


function sh:class (shape, sh, vis, s, ?c) {
    let (suc = exists { ?s rdf:type/rdfs:subClassOf* ?c } ) {
        sh:report(sh:class, sh, shape,  s, rdf:type, s, suc, vis) ;
        return (suc)
    }
}


function sh:disjoint (shape, sh, vis, s, p) {
    let (l = sh:path(shape, s, p), suc = ! xt:member(s, l)) {
        sh:report(sh:disjoint, sh, shape, s, p, s, suc, vis) ;
        return (suc)
    }
}

function sh:equals (shape, sh, vis, s, p) {
    let (l  = sh:path(shape, s, p),
         b1 = sh:equals1(shape, sh, vis, s, p, l),
         b2 = sh:equals2(shape, sh, vis, s, p, l)) {
            return (b1 && b2)
    }
}


function sh:equals1 (shape, sh, vis, s, p, l) {
    let (suc = xt:member(s, l)) {
        sh:report(sh:equals, sh, shape, s, p, s, suc, vis);
        return (suc)
    }
}

function sh:equals2 (shape, sh, vis, s, p, l) {
    let (res = true) {
        for (m in l) {
            let (suc = s = m) {
                sh:report(sh:equals, sh, shape, s, p, m, suc, vis);
                set (res = res && suc)
            }
        } ;
        return (res)
    }
}










