#
# SHACL Interpreter 
#
# Olivier Corby - Wimmics Inria I3S - 2016-2019
#

prefix sh:   <http://www.w3.org/ns/shacl#> 
prefix xsh:  <http://www.w3.org/ns/shacl#> 


#
# Extension
#

#
# constraint function return xsd:boolean 
# called by path and constraint funcall as other operators
#

# sh:trace = sh:eval with trace
function xsh:trace(node, exp) {
    let ((shape) = exp,
         suc = sh:eval(shape, node)) {
        xt:print("trace:", node, xt:turtle(shape), suc) ;
        return (suc)
    }
}

# sh:trace = sh:eval with trace
function xsh:trace(subject, node, exp) {
    let ((shape) = exp,
         suc = sh:eval(shape, node)) {
        xt:print("trace:", subject, node, xt:turtle(shape), suc) ;
        return (suc)
    }
}

# sh:funeval ( [sh:class foaf:Person] )
# shortcut for 
# xsh:function [ sh:eval ([sh:class foaf:Person]) ]
function xsh:funeval(node, exp) {
    let ((shape) = exp,
         suc = sh:eval(shape, node)) {
        return (suc)
    }
}

function sh:pretty(node) {
    if (isBlank(node), xt:turtle(node), st:turtle(node))
}

function sh:success(subject, node, exp) {
    let ((show) = exp) {
        if (coalesce(show, false), xt:print("success:", sh:pretty(node), sh:pretty(subject)), true);
        return (true)
    }
}

function sh:failure(subject, node, exp) {
    let ((show) = exp) {
        if (coalesce(show, false), xt:print("failure:", sh:pretty(node), sh:pretty(subject)), true);
        return (false)
    }
}


function sh:success(node, exp) {
    let ((show) = exp) {
        if (coalesce(show, false), xt:print("success:", sh:pretty(node)), true);
        return (true)
    }
}

function sh:failure(node, exp) {
    let ((show) = exp) {
        if (coalesce(show, false), xt:print("failure:", sh:pretty(node)), true);
        return (false)
    }
}




#
# path function return list of node 
# called by xsh:function in ppathext
#

# sh:path ( [ sh:exist (rdf:type) ] )
function xsh:exist(subject, node, exp) {
    #xt:print("with path:", exp);
    if (xt:size(exp) > 1, xt:print("sequence must be inside a list: xsh:exist", xt:list(exp)), true);
    let ((path) = exp, 
         list = sh:pathfinder(if (xt:size(exp) > 1, exp, path), node)) {
        if (xt:size(list) > 0, xt:list(node), xt:list())
    }
}

# sh:path ( [ sh:notExist (rdf:type) ] )
function xsh:notExist(subject, node, exp) {
    if (xt:size(exp) > 1, xt:print("sequence must be inside a list: xsh:notExist", xt:list(exp)), true);
    let ((path) = exp, 
         list = sh:pathfinder(if (xt:size(exp) > 1, exp, path), node)) {
        if (xt:size(list) = 0, xt:list(node), xt:list())
    }
}

# sh:path ( [ sh:filter ([shape constraint]) ] )
function xsh:filter(subject, node, exp) {
    #xt:print("with shape:", exp);
    let ((shape) = exp, 
          suc = sh:eval(shape, node)) {
        if (suc, xt:list(node), xt:list())
    }
}


# sh:path ( [ sh:notFilter ([shape constraint]) ] )
function xsh:notFilter(subject, node, exp) {
    let ((shape) = exp, 
          suc = sh:eval(shape, node)) {
        if (suc, xt:list(), xt:list(node))
    }
}


# element : node
# [xsh:triple (xsh:predicate)]
# exp = (xsh:predicate)
#
function sh:triple(subject, element, exp) {
    sh:triple(xt:list(), subject, element, exp)
}

# when current element is a triple, consider the object node as current node
# two consecutive triples join by default on object of first triple 
#
function sh:triple(focus, source, element, exp) {
    let ((param) = exp) {
        funcall(param, focus, source, 
            if (isExtension(element), xt:object(element), element), exp)
    }
}

#
# return triples with node as source|predicate|object|graph
# [xsh:triple(xsh:subject)] | [xsh:triple(xsh:subject rdf:type)]
#
function xsh:subject(focus, source, node, exp) {
    let ((name predicate value) = exp) {
        xt:edges(node, coalesce(if (isBlank(predicate), bnode(), predicate), bnode()), coalesce(value, bnode()), focus)
    }
}
function xsh:predicate(focus, source, node, exp) {
    if (xt:size(focus) = 0, xt:edges(node),
        xt:edges(bnode(), node, bnode(), focus))
}
function xsh:object(focus, source, node, exp) {
    let ((name predicate) = exp) {
        xt:edges(bnode(), coalesce(predicate, bnode()), node, focus)
    }
}
function xsh:graph(focus, source, node, exp) {
    let ((name predicate) = exp) {
        xt:edges(bnode(), coalesce(predicate, bnode()), bnode(), node)
    }
}
# xsh:subject & xsh:object : adjacent edges
function xsh:node(focus, source, node, exp) {
    xt:merge(
        xsh:subject(focus, source, node, exp), 
         xsh:object(focus, source, node, exp))
}

#
# exp = (rdf: rdfs:)
# test if node matches with regex
#
function sh:match(node, exp) {
    mapany(rq:regex, node, exp)
}


# triple [xsh:predicate(rdf:type)]
# filter triple with  subject|predicate|object|graph = exp
#
function xsh:subject(source, atriple, exp) {
    let ((param) = exp) {
        if (sh:match(xt:subject(atriple), exp), xt:list(atriple), xt:list())
    }
}
function xsh:mypredicate(focus, source, element, exp) {
    if (isExtension(element),
        xsh:predicateTriple(source, element, exp),
        xsh:predicateNode(focus, source, element, exp))
}
function xsh:object(source, atriple, exp) {
    let ((param) = exp) {
        if (sh:match(xt:object(atriple), exp), xt:list(atriple), xt:list())
    }
}
function xsh:graph(source, atriple, exp) {
    let ((param) = exp) {
        if (sh:match(xt:graph(atriple), exp), xt:list(atriple), xt:list())
    }
}

# filter triple with [xsh:predicate (rdf:type)]
#
function xsh:predicateTriple(source, atriple, exp) {
    let ((param) = exp) {
        if (sh:match(xt:predicate(atriple), exp), xt:list(atriple), xt:list())
    }
}

#
# node [xsh:predicate(xsh:subject)]
# return predicate nodes of triples where node is the subject 
#
function xsh:predicateNode(focus, source, node, exp) {
    let (list = xsh:triple(focus, source, node, exp)) {
        xt:merge(maplist(xt:predicate, list))
    }
}


# element = triple 
# [xsh:node (xsh:subject)]
# exp = (xsh:graph|xsh:subject|xsh:predicate|xsh:object)
#
function sh:mynode(source, element, exp) {
   let ((param) = exp) {
        if (xt:size(exp) = 1, 
            funcall(param, element),
            reduce(xt:merge, maplist(rq:funcall, exp, xt:list(element))))
    }
}





function xsh:subject(atriple) {
    xt:list(xt:subject(atriple))
}
function xsh:predicate(atriple) {
    xt:list(xt:predicate(atriple))
}
function xsh:object(atriple) {
    xt:list(xt:object(atriple))
}
function xsh:graph(atriple) {
    xt:list(xt:graph(atriple))
}
function xsh:node(atriple) {
    if (xt:subject(atriple) = xt:object(atriple), xt:list(xt:subject(atriple)),
        xt:list(xt:subject(atriple), xt:object(atriple)))
}



# node triple    [xsh:equal (xsh:subject xsh:object)] [xsh:equal (xsh:object xsh:source)] 
# triple node    [xsh:equal (xsh:subject)] 
# node node      [xsh:equal (xsh:source)]
#
function sh:equal(source, element, exp) {
    let ((fst snd) = exp) {
        if (if (isExtension(element), # source: node, element: triple
                 funcall(fst, source, element) = funcall(snd, source, element), 
            if (isExtension(source),  # source: triple ; element: node 
                funcall(fst, source, element) = element, 
            # source: node ; element: node 
            source = element)), 
        
        xt:list(element), xt:list())   
    }
}


# xsh:equal()
#
function xsh:source(subject, atriple) {
    subject
}
function xsh:subject(subject, atriple) {
    xt:subject(atriple)
}
function xsh:predicate(subject, atriple) {
    xt:predicate(atriple)
}
function xsh:object(subject, atriple) {
    xt:object(atriple)
}
function xsh:graph(subject, atriple) {
    xt:graph(atriple)
}

function sh:notEqual(source, element, exp) {
    let ((fst snd) = exp) {
        if (if (isExtension(element), # source: node, element: triple
                 funcall(fst, source, element) != funcall(snd, source, element), 
            if (isExtension(source),  # source: triple ; element: node 
                funcall(fst, source, element) != element, 
            # source: node ; element: node 
            source != element)), 
        
        xt:list(element), xt:list())   
    }
}

# Expression interpreter

# evaluator for xsh:function [ xsh:compute (rq:gt h:age (rq:mult 2 h:shoesize)) ]
# exp = (rq:gt h:age (rq:mult 2 h:shoesize))
# node = target node
# if property node is missing, coalesce return true
#
function xsh:evaluate(subject, node, exp) {
    coalesce(xsh:compute(node, exp), true)
}

# exp = (rq:gt (h:age (rq:mult (2 h:shoesize))))
# URI : return value of property of node
# (rq:self (URI)) return URI
# (rq:self) return node
# 
function xsh:compute(subject, node, exp) {
    xsh:compute(node, exp)
}


function xsh:compute(node, exp) {
    if (isExtension(exp)) {
        let ((oper param) = exp) {
            if (xt:has(mapfun, oper), 
                funcall(xt:get(mapfun, oper), node, param), 
                xsh:mycompute(node, oper, param))
        } 
    }
    else if (isURI(exp)) {
        xt:value(node, exp)
    }
    else {
        exp
    }
}

function sh:defun(name, value) {
    xt:set(mapfun, name, value)
}

function sh:defun() {
    sh:defun(rq:or, sh:or);
    sh:defun(rq:if, sh:if);
    sh:defun(rq:coalesce, sh:coalesce);
    sh:defun(rq:self, sh:self);
    sh:defun(rq:list, sh:list) ;
    sh:defun(rq:exist, sh:myexist)
}

function xsh:mycompute(node, oper, param) {
     apply(oper, maplist(lambda(ee, node) { xsh:compute(node, ee) }, param, node))
}

# param = (URI)
function sh:myexist(node, param) {
    return (safe(xt:value(node, xt:get(param, 0))))
}

function sh:list(node, param) {
     param
}

function sh:self(node, param) {
     if (xt:size(param) = 0, node, xt:get(param, 0))
}

function sh:coalesce(node, param) {
    if (xt:size(param) = 0) {
        error()
    }
    else {
        let ((exp | rest) = param) {
            coalesce(xsh:compute(node, exp), sh:coalesce(node, rest))
        }
    }
}

function sh:if(node, param) {
    let ((test e1 e2) = param) {
        if (xsh:compute(node, test), sh:compute(node, e1), sh:compute(node, e2))
    }
}

function sh:or(node, param) {
    let ((e1 e2) = param) {
        return(xsh:compute(node, e1) || sh:compute(node, e2))
    }
}


function xsh:function(name, node) {
    funcall(name, node)
} 

function xsh:function(name, node, value) {
    funcall(name, node, value)
} 

function sh:validURI(url) {
    let (value = xt:validURI(url)) {
        return (value)
    }
}

function sh:validURI(shape, url, any) {
    let (value = xt:validURI(url)) {
        return (value)
    }
}

function sh:validURI(shape, sh, subject, path, url) {
    let (value = xt:validURI(url)) {
        return (value)
    }
}






#
# SHACL std operators
#

function sh:count(s, p){
  let (select ?s ?p (count(*) as ?c) where { ?s ?p ?o })
  { return(?c) }
}

function sh:invCount(?o, ?p){
  let (select ?o ?p (count(*) as ?c) where { ?s ?p ?o })
  { return(?c) }
}

function sh:minCount(s, p, m){
    sh:count(s, p) >= m
}

function sh:maxCount(s, p, m){
    sh:count(s, p) <= m
}

function sh:pattern(shape, node, exp) {
    let ((arg flag) = exp) {
        !isBlank(node) && 
        if (bound(flag), regex(node, arg, flag), regex(node, arg))
    }
}

function xsd:boolean sh:nodeKind(dt:graph shape, value, dt:uri kind){
    (isURI(value)     && kind IN ( sh:IRI, sh:BlankNodeOrIRI, sh:IRIOrLiteral ) ) ||
    (isLiteral(value) && kind IN ( sh:Literal, sh:BlankNodeOrLiteral, sh:IRIOrLiteral ) ) ||
    (isBlank(value)   && kind IN ( sh:BlankNode, sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral ) )  
}

function xsd:boolean sh:minLength(dt:graph shape, s, m){
    ! isBlank(s) && coalesce(strlen(s) >= m, false) 
}

function xsd:boolean sh:maxLength(shape, s, m){
    ! isBlank(s) && coalesce(strlen(s) <= m, false) 
}

function xsd:boolean sh:minInclusive(shape, o, m){
    o >= m
}

function xsd:boolean sh:minExclusive(shape, o, m){
    o > m
}

function xsd:boolean sh:maxInclusive(shape, o, m){
    o <= m
}

function xsd:boolean sh:maxExclusive(shape, o, m){
    o < m
}

function xsd:boolean sh:datatype(shape, o, dt){
    sh:datatype(o, dt)
}

function xsd:boolean sh:datatype(o, dt){
    if (isLiteral(o), return(datatype(o) = dt && isWellFormed(o)), false)
}

function xsd:boolean sh:minCount(s, m){
    s >= m
}

function xsd:boolean sh:maxCount(s, m){
    s <= m
}

function xsd:boolean sh:hasValue(shape, s, v) {
    s = v
}

function xsd:boolean sh:class(?shape, ?o, ?c){
    if (sh:isetup(sh:type), sh:type(?o, ?c), 
        exists { ?o rdf:type/rdfs:subClassOf* ?c })
}

function sh:class(object, class) {
    exists { ?object rdf:type/rdfs:subClassOf* ?class }
}

function sh:type(object, class) {
    exists { ?object rdf:type ?class }
}

function xsd:boolean sh:type(?shape, ?o, ?c){
    exists { ?o rdf:type ?c }
}


function xsd:boolean sh:in(dt:graph ?shape, ?object, ?lv) {
    let (list = sh:getConstraint(sh:in, shape, lv)) {
        for (value in list) { 
            if (object = value && if (isLiteral(object), datatype(object) = datatype(value), true)) {
                return (true)
            } 
        } ;
        return (false)
    }
}

function sh:in(shape, sh) {
    let (select * (aggregate(?val) as ?list)
         where { graph ?shape { ?sh rdf:rest*/rdf:first ?val } } ) {
         return(list)
    }
}


function xsd:boolean sh:languageIn(dt:graph ?shape, ?object, ?lv){
   if (isLiteral(object)) {
        let (lan = lang(object), list = sh:getConstraint(sh:in, shape, lv)) {
            for (value in list) { 
                if (langMatches(lan, value)) {
                    return (true)
                } 
            } ;
            return (false)
        }
    }
    else {
        return (false)
    }
}


# by default, generate no report for sh:node constraints
# if sh:detail() generate report for sh:node constraints
function xsd:boolean sh:node(dt:graph shape, o, cst){
    sh:core(shape, cst, sh:isetup(sh:detail), o)
}

function xsd:boolean sh:property(dt:graph shape, o, cst){
    sh:core(shape, cst, true, o)
}






function xsd:boolean sh:disjoint(dt:list l1, dt:list l2){
    for (x in l1){
            if (xt:member(x, l2)){
                return(false) 
            }     
    } ;
    return(true)
}

function xsd:boolean sh:equal(dt:list l1, dt:list l2){
    return (l1 = l2)
}

