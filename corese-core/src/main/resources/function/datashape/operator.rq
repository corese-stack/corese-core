#
# SHACL Interpreter 
#
# Olivier Corby - Wimmics Inria I3S - 2016-2019
#

prefix sh:   <http://www.w3.org/ns/shacl#> 


#
# Extension
#

# evaluator for sh:function [ sh:name sh:compute ; sh:value (rq:gt h:age (rq:mult 2 h:shoesize)) ]
# exp = (rq:gt h:age (rq:mult 2 h:shoesize))
# node = target node
# if property node is missing, coalesce return true
#
function sh:evaluate(node, exp) {
    coalesce(sh:compute(node, exp), true)
}

# exp = (rq:gt (h:age (rq:mult (2 h:shoesize))))
# URI : return value of property of node
# (rq:self (URI)) return URI
# (rq:self) return node
# 
function sh:compute(node, exp) {
    if (isExtension(exp)) {
        let ((oper param) = exp) {
            if (xt:has(mapfun, oper), 
                funcall(xt:get(mapfun, oper), node, param), 
                sh:compute(node, oper, param))
        } 
    }
    else if (isURI(exp)) {
        xt:value(node, exp)
    }
    else {
        exp
    }
}

function sh:defun(name, value) {
    xt:set(mapfun, name, value)
}

function sh:defun() {
    sh:defun(rq:or, sh:or);
    sh:defun(rq:if, sh:if);
    sh:defun(rq:coalesce, sh:coalesce);
    sh:defun(rq:self, sh:self);
    sh:defun(rq:list, sh:list) ;
    sh:defun(rq:exist, sh:exist)
}

function sh:compute(node, oper, param) {
     apply(oper, maplist(lambda(ee, node) { sh:compute(node, ee) }, param, node))
}

# param = (URI)
function sh:exist(node, param) {
    return (safe(xt:value(node, xt:get(param, 0))))
}

function sh:list(node, param) {
     param
}

function sh:self(node, param) {
     if (xt:size(param) = 0, node, xt:get(param, 0))
}

function sh:coalesce(node, param) {
    if (xt:size(param) = 0) {
        error()
    }
    else {
        let ((exp | rest) = param) {
            coalesce(sh:compute(node, exp), sh:coalesce(node, rest))
        }
    }
}

function sh:if(node, param) {
    let ((test e1 e2) = param) {
        if (sh:compute(node, test), sh:compute(node, e1), sh:compute(node, e2))
    }
}

function sh:or(node, param) {
    let ((e1 e2) = param) {
        return(sh:compute(node, e1) || sh:compute(node, e2))
    }
}


function sh:function(name, node) {
    funcall(name, node)
} 

function sh:function(name, node, value) {
    funcall(name, node, value)
} 

function sh:validURI(url) {
    let (value = xt:validURI(url)) {
        return (value)
    }
}

function sh:validURI(shape, url, any) {
    let (value = xt:validURI(url)) {
        return (value)
    }
}

function sh:validURI(shape, sh, subject, path, url) {
    let (value = xt:validURI(url)) {
        return (value)
    }
}



#
# Std 
#

function sh:count(s, p){
  let (select ?s ?p (count(*) as ?c) where { ?s ?p ?o })
  { return(?c) }
}

function sh:invCount(?o, ?p){
  let (select ?o ?p (count(*) as ?c) where { ?s ?p ?o })
  { return(?c) }
}

function sh:minCount(s, p, m){
    sh:count(s, p) >= m
}

function sh:maxCount(s, p, m){
    sh:count(s, p) <= m
}

function xsd:boolean sh:nodeKind(dt:graph shape, value, dt:uri kind){
    (isURI(value)     && kind IN ( sh:IRI, sh:BlankNodeOrIRI, sh:IRIOrLiteral ) ) ||
    (isLiteral(value) && kind IN ( sh:Literal, sh:BlankNodeOrLiteral, sh:IRIOrLiteral ) ) ||
    (isBlank(value)   && kind IN ( sh:BlankNode, sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral ) )  
}

function xsd:boolean sh:minLength(dt:graph shape, s, m){
    ! isBlank(s) && coalesce(strlen(s) >= m, false) 
}

function xsd:boolean sh:maxLength(shape, s, m){
    ! isBlank(s) && coalesce(strlen(s) <= m, false) 
}

function xsd:boolean sh:minInclusive(shape, o, m){
    o >= m
}

function xsd:boolean sh:minExclusive(shape, o, m){
    o > m
}

function xsd:boolean sh:maxInclusive(shape, o, m){
    o <= m
}

function xsd:boolean sh:maxExclusive(shape, o, m){
    o < m
}

function xsd:boolean sh:datatype(shape, o, dt){
    sh:datatype(o, dt)
}

function xsd:boolean sh:datatype(o, dt){
    if (isLiteral(o), return(datatype(o) = dt && isWellFormed(o)), false)
}

function xsd:boolean sh:minCount(s, m){
    s >= m
}

function xsd:boolean sh:maxCount(s, m){
    s <= m
}

function xsd:boolean sh:hasValue(shape, s, v) {
    s = v
}

function xsd:boolean sh:class(?shape, ?o, ?c){
    if (sh:isetup(sh:type), sh:type(?shape, ?o, ?c), 
        exists { ?o rdf:type/rdfs:subClassOf* ?c })
}

function xsd:boolean sh:type(?shape, ?o, ?c){
    exists { ?o rdf:type ?c }
}


function xsd:boolean sh:in(dt:graph ?shape, ?object, ?lv) {
    let (list = sh:getConstraint(sh:in, shape, lv)) {
        for (value in list) { 
            if (object = value && if (isLiteral(object), datatype(object) = datatype(value), true)) {
                return (true)
            } 
        } ;
        return (false)
    }
}

function sh:in(shape, sh) {
    let (select * (aggregate(?val) as ?list)
         where { graph ?shape { ?sh rdf:rest*/rdf:first ?val } } ) {
         return(list)
    }
}


function xsd:boolean sh:languageIn(dt:graph ?shape, ?object, ?lv){
   if (isLiteral(object)) {
        let (lan = lang(object), list = sh:getConstraint(sh:in, shape, lv)) {
            for (value in list) { 
                if (langMatches(lan, value)) {
                    return (true)
                } 
            } ;
            return (false)
        }
    }
    else {
        return (false)
    }
}


# by default, generate no report for sh:node constraints
# if sh:detail() generate report for sh:node constraints
function xsd:boolean sh:node(dt:graph shape, o, cst){
    sh:core(shape, cst, sh:isetup(sh:detail), o)
}

function xsd:boolean sh:property(dt:graph shape, o, cst){
    sh:core(shape, cst, true, o)
}

function xsd:boolean sh:qualifiedShape(subject, dt:graph shape, qsh){
    sh:core(shape, qsh, false, subject)
}





function xsd:boolean sh:disjoint(dt:list l1, dt:list l2){
    for (x in l1){
            if (xt:member(x, l2)){
                return(false) 
            }     
    } ;
    return(true)
}

function xsd:boolean sh:equal(dt:list l1, dt:list l2){
    return (l1 = l2)
}

