#
# SHACL Interpreter 
#
# Olivier Corby - Wimmics Inria I3S - 2016-2019
#

prefix sh:  <http://www.w3.org/ns/shacl#> 
prefix xsh: <http://www.w3.org/ns/shacl#> 



# targetFunction return triples of predicate 
function xsh:triple(exp) {
    let ((predicate) = exp) {
        xt:edges(predicate)
    }
}


#
# Return mappings of (sh=shape; list=target node list)
#
function  sh:focus(dt:graph ?shape) {
query (
   select ?shape ?sh  (aggregate(distinct ?s) as ?list) 
   where { 
  
    {graph ?shape {
        ?sh sh:targetSubjectsOf ?p 			
        filter not exists { ?sh sh:deactivated true} }
     ?s ?p ?o 	
     }
    
    union
    
    {graph ?shape {
        ?sh sh:targetObjectsOf ?p 				
        filter not exists { ?sh sh:deactivated true} }
        
     ?x ?p ?s}
    
    union 
    
    {graph ?shape {
        ?sh sh:targetClass ?c 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?c}
     
     union 
    
    {graph ?shape {
        ?sh a sh:NodeShape, rdfs:Class 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?sh} 
     
    union 
     
    {graph ?shape {
        ?sh sh:targetNode ?s
        filter not exists { ?sh sh:deactivated true} }
    }
    
    union {
        graph ?shape { 
            ?sh xsh:targetFunction ?fun 
            optional { ?fun ?oper ?param } 
            bind (coalesce(?oper, ?fun) as ?name)
            bind (coalesce(?param, xt:list()) as ?value)
            bind (sh:getValueList(?value) as ?arg)
        }
        values ?s { unnest(funcall(?name, ?arg)) }
    }
    union {
        graph ?shape { 
            ?sh xsh:targetTriplesOf ?prop 
        }
        values ?s { unnest(xt:edges(?prop)) }
    }
                      
  } 
  group by ?sh 
  ) 
}

#
# focus on specific shape sh
#
function  sh:focus(dt:graph shape, sh) {
query (
   select ?shape ?sh  (aggregate(distinct ?s) as ?list) 
   where { 
  
    {graph ?shape {
        ?sh sh:targetSubjectsOf ?p 			
        filter not exists { ?sh sh:deactivated true} }
     ?s ?p ?o 	
     }
    
    union
    
    {graph ?shape {
        ?sh sh:targetObjectsOf ?p 			
        filter not exists { ?sh sh:deactivated true} }
        
     ?x ?p ?s}
    
    union 
    
    {graph ?shape {
        ?sh sh:targetClass ?c 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?c}
     
     union 
    
    {graph ?shape {
        ?sh a sh:NodeShape, rdfs:Class 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?sh} 
     
    union 
     
    {graph ?shape {
        ?sh sh:targetNode ?s
        filter not exists { ?sh sh:deactivated true} }
    }
                      
  } 
  group by ?sh 
  ) 
}

#
# focus on specific shape sh and node s
#
function  sh:focus(dt:graph shape, sh, s) {
query (
   select ?shape ?sh ?s (aggregate(distinct ?s) as ?list) 
   where { 
  
    {graph ?shape {
        ?sh sh:targetSubjectsOf ?p 			
        filter not exists { ?sh sh:deactivated true} }
     ?s ?p ?o 	
     }
    
    union
    
    {graph ?shape {
        ?sh sh:targetObjectsOf ?p 				
        filter not exists { ?sh sh:deactivated true} }
        
     ?x ?p ?s}
    
    union 
    
    {graph ?shape {
        ?sh sh:targetClass ?c 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?c}
     
     union 
    
    {graph ?shape {
        ?sh a sh:NodeShape, rdfs:Class 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?sh} 
     
    union 
     
    {graph ?shape {
        ?sh sh:targetNode ?s
        filter not exists { ?sh sh:deactivated true} }
    }
                      
  } 
  group by ?sh 
  ) 
}

#
# focus on specific node s
#
function sh:focusnode(dt:graph shape, s) {
query (
   select ?shape ?sh ?s (aggregate(distinct ?s) as ?list) 
   where { 
  
    { graph ?shape {
        ?sh sh:targetSubjectsOf ?p 	
        filter not exists { ?sh sh:deactivated true} }
     ?s ?p ?o 	
     }
    
    union
    
    {graph ?shape {
        ?sh sh:targetObjectsOf ?p  					
        filter not exists { ?sh sh:deactivated true} }
        
     ?x ?p ?s 
     }
    
    union 
    
    {graph ?shape {
        ?sh sh:targetClass ?c 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?c}
     
     union 
    
    {graph ?shape {
        ?sh a sh:NodeShape, rdfs:Class 
        filter not exists { ?sh sh:deactivated true} }
        
     ?s rdf:type/rdfs:subClassOf* ?sh} 
     
    union 
     
    {graph ?shape {
        ?sh sh:targetNode ?s
        filter not exists { ?sh sh:deactivated true} }
    }
                      
  } 
  group by ?sh 
  ) 
}


function sh:targetObjectsOf(shape, sh) {
    let (select * (aggregate(xt:list(?sh, ?p)) as ?list) where {
        graph ?shape {
            ?sh sh:targetObjectsOf ?p  					
            filter not exists { ?sh sh:deactivated true} }
        } ) {
        return (list)
    }
}

function sh:list(focus) {
    mapmerge(lambda((sh, list)) { 
        return(if (bound(sh) && xt:size(list) > 0, 
            xt:list(xt:list(sh, list)), 
            xt:list())) }, 
        focus)
}

