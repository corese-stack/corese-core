#
# SHACL Interpreter 
#
# Olivier Corby - Wimmics Inria I3S - 2016-2019
#
prefix sh:   <http://www.w3.org/ns/shacl#> 

@import <ppath.rq> <operator.rq> <path.rq> <core.rq> <constraint.rq>



# when true, generate validation report for sh:node constraints and one report for sh:node 
# otherwise, generate only one report for sh:node (default)
function sh:detail(xsd:boolean bb) {
    set(detailShapeMode = bb)
}

function sh:detail() {
    return (bound(detailShapeMode) && detailShapeMode)
}

function sh:test(){
    st:get(st:test, true) 
}

function sh:pack(test, name){
    if (sh:test(), 
        return(concat("/user/corby/home/AAData/sttl/datashape/", test)), name)
}

function sh:main(){
    sh:pack("main", st:dsmain)
}

function sh:path(){
    sh:pack("path", st:dspath)
}


# main function 
function xsd:boolean sh:hasShape(dt:graph shape, sh:NodeShape sh, xsd:boolean vis, ls) {
    sh:core(shape, sh, vis, ls)
}

# get relevant properties of sh  in a table
function sh:getConstraint(name, sh) {
    #xt:print("get:", name, sh, xt:get(sh:getmap(name), sh)) ;
    xt:get(sh:getmap(name), sh)
}

# record relevant properties of sh  in a table
function sh:setConstraint(name, sh, value) {
    #xt:print("set:", name, sh, value, xt:size(mapmap), xt:size(sh:getmap(name)));
    xt:set(sh:getmap(name), sh, value)
}


function sh:getmap(name) {
    coalesce(xt:get(mapmap, name), xt:set(mapmap, name, xt:map()))
}

function xsd:boolean sh:safe(dt:graph shape, sh, xsd:boolean suc) {
    suc
}

function xsd:boolean st:report(name, s, xsd:boolean suc, xsd:boolean vis) {
    if (vis) {
        sh:visit(name, s, suc)
    } ;
    return (true)
}

#
# suc is success/failure of the shape
# vis true means generate a ValidationResult
#
function xsd:boolean st:report(name,  sh, dt:graph shape, foc, p, o, xsd:boolean suc, xsd:boolean vis){
    st:report(name, sh, st:null, shape, foc, p, o, suc, vis)
}

function xsd:boolean st:report(name,  sh, cst, dt:graph shape, foc, p, o, xsd:boolean suc, xsd:boolean vis){
    if (vis && ! suc) { 
        sh:result(name, sh, cst, shape, foc,  p, o) ;
        sh:visit(name, foc, suc)
    } ;
    return(true)
}

function xsd:boolean st:report(name, sh:NodeShape sh, dt:graph shape, foc, xsd:boolean suc, xsd:boolean vis){
    st:report(name, sh, shape, foc, st:null, st:null, suc, vis)
}

function sh:value(v){
    if (isURI(v) && v = st:null, error(), v)
}




# start
function sh:starter() {
    sh:start() ;
    # validation report graph
    set(validationReport = query(construct where {})) ;
    set(mapmap = xt:map()) ;
    sh:trace(false);
    sh:init()
}


# within xt:focus(?shape, sh:sibling())
# record sibling qualifiedValueShape in a table
function sh:sibling() {
    for (select  ?qsh ?list where {
            select ?qsh (aggregate(xt:list(?sibling, ?path)) as ?list) 
            where {
                select distinct ?qsh ?sibling ?path
                where {
                    ?root sh:property [ sh:qualifiedValueShape ?qsh ];
                          sh:property [ sh:qualifiedValueShape ?sibling ; sh:path ?path ]  
                    filter (?sibling != ?qsh)
                }
            }
            group by ?qsh
        } ) {
            if (bound(?qsh), sh:setConstraint(sh:sibling, ?qsh, ?list), true) 
    } ;
    return (true)
}


function sh:trace() {
    return (shaclTrace)
}

function sh:trace(bb) {
    set (shaclTrace = bb )
}

# finish
function xsd:boolean sh:success(xsd:boolean bb) {
    if (bb) {
        let (g = 
            construct { [] a sh:ValidationReport ; sh:conforms true }
            where { }
            ) {
            us:insert(g, validationReport)
        }
    } ;
    sh:finish() ;
    return (true)
}

# insert report element g into report
function us:insert(dt:graph g, dt:graph report) {
    for ((s p o) in g) {
        xt:focus(report, xt:insert(s, p, o))
    } 
}




#
# create a validation result  graph
# stored in the visitor graph
# get it with st:visitedGraph()
# sh :  the shape
# cst : the constraint in case of sh:node
#
function xsd:boolean sh:result(?name, ?sh, ?cst, dt:graph ?shape, ?foc, ?p, ?o){
    let (g = 
       construct {
        ?bnode a sh:ValidationReport ; 
            sh:result ?r ; 
            sh:conforms false .
        
        ?r rdf:type sh:ValidationResult ;
            sh:resultSeverity ?sev ;
            sh:focusNode ?foc ;
            sh:focusNodeDetail ?focDetail ;
            sh:resultPath ?pathDetail ; 
            #sh:resultPath ?pp ; 
            #sh:pathDetail ?pathDetail ; 
            sh:value ?oo ;
            sh:valueDetail ?valueDetail ;
            sh:resultMessage ?mes ;
            sh:sourceConstraintComponent ?def ;
            sh:sourceShape ?sh
        } 
        where { 
            bind (uuid() as ?r)
            bind (coalesce(sh:isdefby(?name), ?name) as ?def)
            bind (coalesce(xt:value(?shape, ?sh, sh:severity), sh:Violation) as ?sev)
            bind (sh:getMessage(?shape, ?sh, ?cst) as ?m)
            bind (if (bound(?m), ?m, concat("Fail at: ", sh:createMessage(?shape, ?sh, ?cst))) as ?mes)
            bind (sh:value(?p) as ?pp)
            bind (sh:value(?o) as ?oo)            
            bind (if (bound(?pp), sh:graph(?shape, ?pp), error())  as ?pathDetail)                                       
            bind (sh:graphbnode(?shape, ?foc) as ?focDetail)
            bind (if (bound(?oo), sh:graphbnode(?shape, ?oo), error())  as ?valueDetail)
            bind (sh:bnodeid() as ?bnode)
        } 
        values (?name ?sh ?cst ?shape ?foc  ?p ?o) { (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF) }
        ) 
    {
        us:insert(g, validationReport);
        return(true)
    }
}

function sh:createMessage(shape, sh, cst) {
    if (isURI(cst) && cst = st:null, 
        xt:turtle(shape, sh),  
        xt:turtle(shape, cst))
}

function sh:getMessage(shape, sh, cst) {
    if (isURI(cst) && cst = st:null, 
        xt:value(shape, sh, sh:message),  
        coalesce(xt:value(shape, cst, sh:message), xt:value(shape, sh, sh:message)))
}

#
# transformer visitor
#
function sh:start() {
    st:visit(st:start, st:trace) 
}

# declare report graph to transformer visitor graph, use case: shape workflow
function sh:finish() {
    #sh:tracefinish();
    st:visit(st:trace, st:graph, validationReport) 
}

function sh:tracefinish() {
    xt:print(xt:turtle(validationReport));
    let (cc = 0) {
        for ((key val) in mapmap) {
                xt:print(set(cc = cc + 1), key, xt:size(val))
        }
    }
}

# when suc = false, declare error on node (for future pprint)
function sh:visit(name, node, suc) {
    st:visit(name, node, suc)
}

# within graph shape {}
function dt:uri sh:severity(sh) {
    coalesce(xt:value(sh, sh:severity), sh:Violation)
}

function sh:message(sh){
    xt:value(sh, sh:message)
}

function sh:bnodeid(){
    coalesce(bnodeid, set(bnodeid = bnode()))
}


# trick datatype for st:turtle transformation to pprint a graph in Turtle format
function sh:graph(shape, var){
if (isBlank(var), 
    return(strdt(xt:turtle(shape, var), xt:graph)), 
    var)
}

function sh:graphbnode(shape, var){
    if (isBlank(var),  
        return(sh:graph(shape, var)),
        return(error()))
}


function sh:init(){
    map (sh:define, sh:def())
}

function sh:define(def){
    let ((name, value) = def){
        sh:setConstraint(sh:def, name, value)
    } ;
    return(true)
}

function dt:list sh:def(){
    let (list = @(
        (sh:function        sh:FunctionConstraintComponent)
        (sh:functioncst     sh:FunctionConstraintComponent)
        (sh:class           sh:ClassConstraintComponent)
        (sh:datatype        sh:DatatypeConstraintComponent)
        (sh:nodeKind        sh:NodeKindConstraintComponent)
        (sh:minCount        sh:MinCountConstraintComponent)
        (sh:maxCount        sh:MaxCountConstraintComponent)
        
        (sh:minExclusive	sh:MinExclusiveConstraintComponent)
        (sh:minInclusive	sh:MinInclusiveConstraintComponent)
        (sh:maxExclusive    sh:MaxExclusiveConstraintComponent)
        (sh:maxInclusive    sh:MaxInclusiveConstraintComponent)
        (sh:minLength       sh:MinLengthConstraintComponent)
        (sh:maxLength       sh:MaxLengthConstraintComponent)
        (sh:pattern	        sh:PatternConstraintComponent)
        (sh:languageIn      sh:LanguageInConstraintComponent)
        (sh:uniqueLang      sh:UniqueLangConstraintComponent)
        (sh:equals          sh:EqualsConstraintComponent)
        (sh:disjoint        sh:DisjointConstraintComponent)
        (sh:lessThan        sh:LessThanConstraintComponent)
        (sh:lessThanOrEquals sh:LessThanOrEqualsConstraintComponent)
        (sh:not             sh:NotConstraintComponent)
        (sh:and             sh:AndConstraintComponent)
        (sh:or              sh:OrConstraintComponent)
        (sh:xone            sh:XoneConstraintComponent)
        (sh:node            sh:NodeConstraintComponent)
        (sh:qualifiedValueShape sh:QualifiedValueShapeConstraintComponent)
        (sh:qualifiedMinCount   sh:QualifiedMinCountConstraintComponent)
        (sh:qualifiedMaxCount   sh:QualifiedMaxCountConstraintComponent)
        (sh:qualifiedValueShapeDisjoint sh:qualifiedValueShapeDisjointConstraintComponent)
        (sh:closed      sh:ClosedConstraintComponent)
        (sh:hasValue    sh:HasValueConstraintComponent)
        (sh:in          sh:InConstraintComponent)
        
        (sh:sparql      sh:SPARQLConstraintComponent)
    ) ) {
        return(?list)
    } 
} 



function sh:isdefby(name){
    sh:getConstraint(sh:def, name)
}


