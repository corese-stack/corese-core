name: Publish GitHub Release

on:
  push:
    tags:
      - "v*.*.*"  # Déclenche le workflow pour les tags de version, ex. v4.6.0

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build les artefacts .jar
      - name: Build project
        run: ./gradlew build

      # Extraire le changelog correspondant à la version
      - name: Extract Changelog for Release
        id: changelog
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          VERSION="${TAG_NAME#v}"
          sed -n "/## Version $VERSION/,/## Version/p" CHANGELOG.md | sed '$d' > release_notes.md
        env:
          GITHUB_REF: ${{ github.ref }}

      # Créer une release GitHub avec le changelog et ajouter les artefacts .jar
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body_path: release_notes.md
          draft: true
          prerelease: false

      # Ajouter les fichiers .jar à la release
      - name: Upload JAR Files to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          asset_path: build/libs/*.jar
          asset_name: corese-core-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive
