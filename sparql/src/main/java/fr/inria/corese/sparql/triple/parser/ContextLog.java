package fr.inria.corese.sparql.triple.parser;

import fr.inria.corese.kgram.core.Mappings;
import fr.inria.corese.sparql.exceptions.EngineException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/**
 * Service logger
 * Used by corese core ProviderImpl and Service
 * Stored in Query global AST Context.
 * 
 * @author Olivier Corby, Wimmics INRIA I3S, 2021
 */
public class ContextLog implements URLParam {
    
    // log generated by service interpreter ProviderImpl and Service (corese core)
    // log service exception list
    private List<EngineException> exceptionList;
    // log service SPARQL Results XML format link href=url
    private List<String> linkList;
    // log service endpoint URL 
    List<String> urlList;
    // url -> input/output Mappings size
    CountMap inputMap, outputMap;
    private ResultMap resultMap;
    private Mappings selectMap;
    
    private ASTQuery ast, astSelect;
    
    public class CountMap extends HashMap<String, Integer> {
        
        public ArrayList<String> getKeys() {            
            ArrayList<String> list = new ArrayList<>();
            list.addAll(keySet());           
            Collections.sort(list);
            return list;
        }
        
        void incr(URLServer url, Mappings map) {
            Integer n = get(url.getLogURLNumber());
            if (n == null) {
                n = 0;
            }
            put(url.getLogURLNumber(), n + mapSize(map));
        }
    }
    
    public class ResultMap extends HashMap<String, Mappings> {
        
        // number of results to be displayed
        private int display = 10;
        
        public ArrayList<String> getKeys() {            
            ArrayList<String> list = new ArrayList<>();
            list.addAll(keySet());           
            Collections.sort(list);
            return list;
        }
        
        public int getDisplay() {
            return display;
        }
        
        public void setDisplay(int display) {
            this.display = display;
        }
    }
    
    public ContextLog() {
        exceptionList = new ArrayList<>();
        linkList = new ArrayList<>();
        urlList = new ArrayList<>();
        inputMap = new CountMap();
        outputMap = new CountMap();
        resultMap = new ResultMap();
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("URL List: %s\n",  getURLList().toString())); 
        sb.append(String.format("Link List: %s\n", getLinkList().toString())); 
        return sb.toString();
    }
    
    public boolean isEmpty() {
        return getURLList().isEmpty();
    }
    
    public List<EngineException> getExceptionList() {
        return exceptionList;
    }

    
    public void setExceptionList(List<EngineException> exceptionList) {
        this.exceptionList = exceptionList;
    }
    
    public void addException(EngineException e) {       
        getExceptionList().add(e);
    }
    
    
    public String getLink() {
        if (getLinkList().isEmpty()) {
            return null;
        }
        return getLinkList().get(0);
    }
    
    
    public List<String> getLinkList() {
        return linkList;
    }
    
    public void setLink(List<String> linkList) {
        this.linkList = linkList;
    }
    
    public void addLink(String url) {
        getLinkList().add(url);
    }
        
    public List<String> getURLList() {
        return urlList;
    }
    
    public void setURLList(List<String> urlList) {
        this.urlList = urlList;
    }
    
    public void addURL(URLServer url) {
        if (! getURLList().contains(url.getLogURL())) {
            getURLList().add(url.getLogURL());
        }
    }
    
    public void addURLInput(URLServer url, Mappings map) {
        inputMap.incr(url, map);
    }
    
    public void addURLOutput(URLServer url, Mappings map) {
        outputMap.incr(url, map);
        if (url.hasParameter(NBRESULT) && url.intValue(NBRESULT)>0 && !map.isEmpty()) {
            if (!url.hasParameter(RESULT) || url.getLogURLNumber().contains(url.getParameter(RESULT))) {                       
                getResultMap().put(url.getLogURLNumber(), map);
                getResultMap().setDisplay(url.intValue(NBRESULT));
            }
        }
    }    
    
    int mapSize(Mappings map) {
        return (map==null)?0:map.size();
    }
    
   public void share(ContextLog log) {
       if (getAST() == null) {
           setAST(log.getAST());
       }
       if (getASTSelect() == null){
           setASTSelect(log.getASTSelect());
       }
       if (getSelectMap()== null){
           setSelectMap(log.getSelectMap());
       }
   }
    
   public CountMap getInputMap() {
       return inputMap;
   }
    
   public CountMap getOutputMap() {
       return outputMap;
   }

    /**
     * @return the ast
     */
    public ASTQuery getAST() {
        return ast;
    }

    /**
     * @param ast the ast to set
     */
    public void setAST(ASTQuery ast) {
        this.ast = ast;
    }

    /**
     * @return the resultMap
     */
    public ResultMap getResultMap() {
        return resultMap;
    }

    /**
     * @param resultMap the resultMap to set
     */
    public void setResultMap(ResultMap resultMap) {
        this.resultMap = resultMap;
    }

    /**
     * @return the astSelect
     */
    public ASTQuery getASTSelect() {
        return astSelect;
    }

    /**
     * @param astSelect the astSelect to set
     */
    public void setASTSelect(ASTQuery astSelect) {
        this.astSelect = astSelect;
    }

    /**
     * @return the selectMap
     */
    public Mappings getSelectMap() {
        return selectMap;
    }

    /**
     * @param selectMap the selectMap to set
     */
    public void setSelectMap(Mappings selectMap) {
        this.selectMap = selectMap;
    }
}
