package fr.inria.corese.sparql.triple.parser;

import fr.inria.corese.kgram.core.Mappings;
import fr.inria.corese.sparql.exceptions.EngineException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/**
 * Service logger
 * Used by corese core ProviderImpl and Service
 * Stored in Query global AST Context.
 */
public class ContextLog {
    
    // log generated by service interpreter ProviderImpl and Service (corese core)
    // log service exception list
    private List<EngineException> exceptionList;
    // log service SPARQL Results XML format link href=url
    private List<String> linkList;
    // log service endpoint URL 
    List<String> urlList;
    // url -> input/output Mappings size
    CountMap inputMap, outputMap;
    private ASTQuery ast;
    
    public class CountMap extends HashMap<String, Integer> {
        
        public ArrayList<String> getKeys() {
            
            ArrayList<String> list = new ArrayList<>();
            for (String key : keySet()) {
                list.add(key);
            }
            Collections.sort(list);
            return list;
        }
    }
    
    ContextLog() {
        exceptionList = new ArrayList<>();
        linkList = new ArrayList<>();
        urlList = new ArrayList<>();
        inputMap = new CountMap();
        outputMap = new CountMap();
    }
    
    public boolean isEmpty() {
        return getURLList().isEmpty();
    }
    
    public List<EngineException> getExceptionList() {
        return exceptionList;
    }

    
    public void setExceptionList(List<EngineException> exceptionList) {
        this.exceptionList = exceptionList;
    }
    
    public void addException(EngineException e) {       
        getExceptionList().add(e);
    }
    
    
    public List<String> getLink() {
        return linkList;
    }

    
    public void setLink(List<String> linkList) {
        this.linkList = linkList;
    }
    
    public void addLink(String url) {
        getLink().add(url);
    }
        
    public List<String> getURLList() {
        return urlList;
    }
    
    public void setURLList(List<String> urlList) {
        this.urlList = urlList;
    }
    
    public void addURL(URLServer url) {
        if (! getURLList().contains(url.getLogURL())) {
            getURLList().add(url.getLogURL());
        }
    }
    
    public void addURLInput(URLServer url, Mappings map) {
        incr(url, inputMap, map);
    }
    
    public void addURLOutput(URLServer url, Mappings map) {
        incr(url, outputMap, map);
    }
    
    void incr(URLServer url, HashMap<String, Integer> amap, Mappings map) {
        Integer n = amap.get(url.getLogURLNumber());
        if (n == null) {
            amap.put(url.getLogURLNumber(), size(map));
        } else {
            amap.put(url.getLogURLNumber(), n + size(map));
        }
    }
    
    int size(Mappings map) {
        return (map==null)?0:map.size();
    }
    
   public CountMap getInputMap() {
       return inputMap;
   }
    
   public CountMap getOutputMap() {
       return outputMap;
   }

    /**
     * @return the ast
     */
    public ASTQuery getAST() {
        return ast;
    }

    /**
     * @param ast the ast to set
     */
    public void setAST(ASTQuery ast) {
        this.ast = ast;
    }
}
